;
; File generated by cc65 v 2.18 - Debian 2.19-1
;
	.fopt		compiler,"cc65 v 2.18 - Debian 2.19-1"
	.setcpu		"6502"
	.smart		on
	.autoimport	on
	.case		on
	.debuginfo	off
	.importzp	sp, sreg, regsave, regbank
	.importzp	tmp1, tmp2, tmp3, tmp4, ptr1, ptr2, ptr3, ptr4
	.macpack	longbranch
	.forceimport	__STARTUP__
	.import		_pal_bg
	.import		_pal_spr
	.import		_pal_col
	.import		_pal_bright
	.import		_ppu_wait_nmi
	.import		_ppu_wait_frame
	.import		_ppu_off
	.import		_ppu_on_all
	.import		_ppu_on_bg
	.import		_oam_clear
	.import		_oam_meta_spr
	.import		_music_play_gated
	.export		_music_play
	.import		_music_stop
	.import		_music_pause
	.import		_sfx_play
	.export		_sfx_play_damped
	.import		_pad_trigger
	.import		_pad_state
	.import		_scroll
	.import		_bank_spr
	.import		_bank_bg
	.import		_rand8
	.import		_set_vram_update
	.import		_vram_adr
	.import		_vram_put
	.import		_vram_fill
	.import		_vram_read
	.import		_vram_write
	.import		_delay
	.import		_abs
	.import		_memcpy
	.export		_splat_title
	.export		_kelpdome
	.export		_bluefin_depot
	.export		_saltspray
	.export		_twofish
	.export		_endgame
	.export		_SprPlayer1SquidUpFrame1
	.export		_SprPlayer1SquidUpFrame2
	.export		_SprPlayer1SquidRightFrame1
	.export		_SprPlayer1SquidDownFrame1
	.export		_SprPlayer1SquidLeftFrame1
	.export		_SprPlayer1SquidRightFrame2
	.export		_SprPlayer1SquidDownFrame2
	.export		_SprPlayer1SquidLeftFrame2
	.export		_SprPlayer1SquidDown
	.export		_SprPlayer1SquidRight
	.export		_SprPlayer1SquidUp
	.export		_SprPlayer1SquidLeft
	.export		_SprPlayer1Squid
	.export		_SprPlayer2SquidUpFrame2
	.export		_SprPlayer2SquidUpFrame1
	.export		_SprPlayer2SquidRightFrame2
	.export		_SprPlayer2SquidDownFrame2
	.export		_SprPlayer2SquidLeftFrame2
	.export		_SprPlayer2SquidRightFrame1
	.export		_SprPlayer2SquidDownFrame1
	.export		_SprPlayer2SquidLeftFrame1
	.export		_SprPlayer2SquidDown
	.export		_SprPlayer2SquidRight
	.export		_SprPlayer2SquidUp
	.export		_SprPlayer2SquidLeft
	.export		_SprPlayer2Squid
	.export		_SprPlayer1RollerDownFrame1
	.export		_SprPlayer1RollerDownFrame2
	.export		_SprPlayer1RollerDown
	.export		_SprPlayer1RollerRightFrame1
	.export		_SprPlayer1RollerRightFrame2
	.export		_SprPlayer1RollerRight
	.export		_SprPlayer1RollerUpFrame1
	.export		_SprPlayer1RollerUpFrame2
	.export		_SprPlayer1RollerUp
	.export		_SprPlayer1RollerLeftFrame1
	.export		_SprPlayer1RollerLeftFrame2
	.export		_SprPlayer1RollerLeft
	.export		_SprPlayer1Roller
	.export		_SprPlayer1ChargerDownFrame1
	.export		_SprPlayer1ChargerDownFrame2
	.export		_SprPlayer1ChargerDown
	.export		_SprPlayer1ChargerRightFrame1
	.export		_SprPlayer1ChargerRightFrame2
	.export		_SprPlayer1ChargerRight
	.export		_SprPlayer1ChargerUpFrame1
	.export		_SprPlayer1ChargerUpFrame2
	.export		_SprPlayer1ChargerUp
	.export		_SprPlayer1ChargerLeftFrame1
	.export		_SprPlayer1ChargerLeftFrame2
	.export		_SprPlayer1ChargerLeft
	.export		_SprPlayer1Charger
	.export		_SprPlayer1
	.export		_SprPlayer2RollerDownFrame1
	.export		_SprPlayer2RollerDownFrame2
	.export		_SprPlayer2RollerDown
	.export		_SprPlayer2RollerRightFrame1
	.export		_SprPlayer2RollerRightFrame2
	.export		_SprPlayer2RollerRight
	.export		_SprPlayer2RollerUpFrame1
	.export		_SprPlayer2RollerUpFrame2
	.export		_SprPlayer2RollerUp
	.export		_SprPlayer2RollerLeftFrame1
	.export		_SprPlayer2RollerLeftFrame2
	.export		_SprPlayer2RollerLeft
	.export		_SprPlayer2Roller
	.export		_SprPlayer2ChargerDownFrame1
	.export		_SprPlayer2ChargerDownFrame2
	.export		_SprPlayer2ChargerDown
	.export		_SprPlayer2ChargerRightFrame1
	.export		_SprPlayer2ChargerRightFrame2
	.export		_SprPlayer2ChargerRight
	.export		_SprPlayer2ChargerUpFrame1
	.export		_SprPlayer2ChargerUpFrame2
	.export		_SprPlayer2ChargerUp
	.export		_SprPlayer2ChargerLeftFrame1
	.export		_SprPlayer2ChargerLeftFrame2
	.export		_SprPlayer2ChargerLeft
	.export		_SprPlayer2Charger
	.export		_SprPlayer2
	.export		_SprPlayers
	.export		_judd_left
	.export		_judd_tie
	.export		_judd_right
	.export		_unselected_roller
	.export		_unselected_charger
	.export		_palTitle
	.export		_palInkable
	.export		_palEndgame
	.export		_palPaused
	.export		_palCharacters
	.export		_palCharPaused
	.export		_palJudd
	.export		_versionStr
	.export		_victoryMsg
	.export		_fourSpaces
	.export		_tieMsg
	.export		_zero
	.export		_credits_0
	.export		_credits_1
	.export		_credits_2
	.export		_credits_3
	.export		_credits_4
	.export		_credits_5
	.export		_credits_6
	.export		_credits_7
	.export		_credits_8
	.export		_credits_9
	.export		_credits_10
	.export		_credits_11
	.export		_credits_12
	.export		_credits_13
	.export		_credits_14
	.export		_credits_15
	.export		_credits_16
	.export		_credits_17
	.export		_credits_18
	.export		_credits
	.export		_select_map
	.export		_level_kelpdome
	.export		_level_bluefin_depot
	.export		_level_saltspray
	.export		_level_twofish
	.export		_levelList
	.export		_select_weapon
	.export		_projectile_speed
	.export		_weapon_ranges
	.export		_weapon_cooldown
	.export		_weapon_movement_speed
	.export		_updateListData
	.export		_dirs
	.export		_insert_into_update_list
	.export		_set_tile_at
	.export		_clear_update_list
	.export		_get_tile_palette
	.export		_set_tile_palette
	.export		_reset_palette_state
	.export		_score_player
	.export		_can_ink
	.export		_show_title
	.export		_put_num
	.export		_print_str
	.export		_show_select_map
	.export		_show_select_weapon
	.export		_show_credits
	.export		_show_endgame
	.export		_projectile_move
	.export		_player_dist
	.export		_player_move_test
	.export		_player_move
	.export		_player_make_projectile
	.export		_player_die
	.export		_ai_move
	.export		_game_loop
	.export		_main

.segment	"DATA"

_credits:
	.addr	_credits_0
	.addr	_credits_1
	.addr	_credits_2
	.addr	_credits_3
	.addr	_credits_4
	.addr	_credits_5
	.addr	_credits_6
	.addr	_credits_7
	.addr	_credits_8
	.addr	_credits_9
	.addr	_credits_10
	.addr	_credits_11
	.addr	_credits_12
	.addr	_credits_13
	.addr	_credits_14
	.addr	_credits_15
	.addr	_credits_16
	.addr	_credits_17
	.addr	_credits_18
	.addr	_zero
	.addr	_zero
	.addr	_zero
.segment	"ZEROPAGE"
_update_list_index:
	.byte	$00
_player_score:
	.word	$0000
	.res	2,$00

.segment	"RODATA"

_splat_title:
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$0C
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$24
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$29
	.byte	$2A
	.byte	$2B
	.byte	$2B
	.byte	$2C
	.byte	$2D
	.byte	$00
	.byte	$2E
	.byte	$2F
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1D
	.byte	$34
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$36
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$2B
	.byte	$37
	.byte	$38
	.byte	$39
	.byte	$3A
	.byte	$3B
	.byte	$3C
	.byte	$3D
	.byte	$3E
	.byte	$3F
	.byte	$40
	.byte	$1C
	.byte	$1C
	.byte	$41
	.byte	$42
	.byte	$43
	.byte	$1C
	.byte	$1C
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$00
	.byte	$46
	.byte	$47
	.byte	$2B
	.byte	$2B
	.byte	$48
	.byte	$49
	.byte	$4A
	.byte	$4B
	.byte	$4C
	.byte	$4D
	.byte	$4E
	.byte	$4F
	.byte	$50
	.byte	$51
	.byte	$52
	.byte	$53
	.byte	$54
	.byte	$55
	.byte	$56
	.byte	$57
	.byte	$58
	.byte	$59
	.byte	$1C
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$5E
	.byte	$5F
	.byte	$2B
	.byte	$2B
	.byte	$60
	.byte	$61
	.byte	$62
	.byte	$63
	.byte	$64
	.byte	$65
	.byte	$66
	.byte	$67
	.byte	$68
	.byte	$69
	.byte	$6A
	.byte	$6B
	.byte	$6C
	.byte	$6D
	.byte	$6E
	.byte	$6F
	.byte	$70
	.byte	$71
	.byte	$72
	.byte	$02
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$1C
	.byte	$76
	.byte	$77
	.byte	$78
	.byte	$79
	.byte	$7A
	.byte	$7B
	.byte	$7C
	.byte	$7D
	.byte	$7E
	.byte	$7F
	.byte	$80
	.byte	$81
	.byte	$82
	.byte	$83
	.byte	$84
	.byte	$85
	.byte	$86
	.byte	$87
	.byte	$88
	.byte	$89
	.byte	$8A
	.byte	$1C
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$30
	.byte	$31
	.byte	$8F
	.byte	$90
	.byte	$1C
	.byte	$1C
	.byte	$91
	.byte	$92
	.byte	$93
	.byte	$94
	.byte	$95
	.byte	$96
	.byte	$97
	.byte	$98
	.byte	$99
	.byte	$9A
	.byte	$9B
	.byte	$9C
	.byte	$9D
	.byte	$00
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$1C
	.byte	$A1
	.byte	$A2
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$A7
	.byte	$00
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$AA
	.byte	$AB
	.byte	$AC
	.byte	$AD
	.byte	$AE
	.byte	$AF
	.byte	$B0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$BE
	.byte	$BF
	.byte	$C0
	.byte	$C1
	.byte	$C2
	.byte	$C3
	.byte	$5B
	.byte	$5C
	.byte	$5D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$1C
	.byte	$1C
	.byte	$CF
	.byte	$D0
	.byte	$D1
	.byte	$D2
	.byte	$D3
	.byte	$02
	.byte	$73
	.byte	$74
	.byte	$75
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D7
	.byte	$D8
	.byte	$00
	.byte	$D9
	.byte	$DA
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$8B
	.byte	$8C
	.byte	$8D
	.byte	$8E
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$9E
	.byte	$9F
	.byte	$A0
	.byte	$1C
	.byte	$1C
	.byte	$DC
	.byte	$A3
	.byte	$A4
	.byte	$A5
	.byte	$A6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$B4
	.byte	$B5
	.byte	$B6
	.byte	$B7
	.byte	$B8
	.byte	$B9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C4
	.byte	$C5
	.byte	$C6
	.byte	$C7
	.byte	$00
	.byte	$C8
	.byte	$C9
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E0
	.byte	$E1
	.byte	$E2
	.byte	$E3
	.byte	$E3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D4
	.byte	$D5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$D6
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$E3
	.byte	$E4
	.byte	$E5
	.byte	$E1
	.byte	$E4
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DB
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$04
	.byte	$05
	.byte	$00
	.byte	$06
	.byte	$00
	.byte	$07
	.byte	$08
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$09
	.byte	$0A
	.byte	$0B
	.byte	$00
	.byte	$0C
	.byte	$0D
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0E
	.byte	$02
	.byte	$00
	.byte	$0F
	.byte	$10
	.byte	$11
	.byte	$12
	.byte	$13
	.byte	$14
	.byte	$15
	.byte	$16
	.byte	$17
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$19
	.byte	$1A
	.byte	$1B
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1D
	.byte	$1E
	.byte	$1F
	.byte	$20
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$25
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$26
	.byte	$27
	.byte	$28
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DD
	.byte	$30
	.byte	$31
	.byte	$8F
	.byte	$90
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1D
	.byte	$34
	.byte	$35
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DE
	.byte	$A8
	.byte	$00
	.byte	$00
	.byte	$A9
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$44
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$DF
	.byte	$BA
	.byte	$BB
	.byte	$BC
	.byte	$BD
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$5A
	.byte	$5B
	.byte	$5C
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CA
	.byte	$CB
	.byte	$CC
	.byte	$CD
	.byte	$CE
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$1C
	.byte	$72
	.byte	$02
	.byte	$73
	.byte	$74
	.byte	$00
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$5D
	.byte	$0C
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$57
	.byte	$55
	.byte	$55
	.byte	$D5
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$4C
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$55
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$77
	.byte	$55
	.byte	$55
	.byte	$D5
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$FC
	.byte	$FF
	.byte	$FF
	.byte	$BF
	.byte	$AA
	.byte	$C0
	.byte	$FC
	.byte	$3F
	.byte	$CF
	.byte	$AF
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$80
	.byte	$AF
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$AA
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
	.byte	$0A
_kelpdome:
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$22
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$10
	.byte	$2B
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$35
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$34
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3A
	.byte	$3B
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$36
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$28
	.byte	$29
	.byte	$23
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$34
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$34
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$28
	.byte	$29
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$34
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$26
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$36
	.byte	$25
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$34
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$27
	.byte	$3C
	.byte	$3D
	.byte	$20
	.byte	$21
	.byte	$11
	.byte	$2B
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$36
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$24
	.byte	$27
	.byte	$2C
	.byte	$2D
	.byte	$30
	.byte	$31
	.byte	$3A
	.byte	$3B
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$3C
	.byte	$3D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$0F
	.byte	$0F
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$01
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$08
	.byte	$00
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$FC
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_bluefin_depot:
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$29
	.byte	$24
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$34
	.byte	$35
	.byte	$38
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$11
	.byte	$2B
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$10
	.byte	$2B
	.byte	$3A
	.byte	$3B
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3A
	.byte	$3B
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$29
	.byte	$24
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$34
	.byte	$35
	.byte	$38
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$FF
	.byte	$FF
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$3F
	.byte	$03
	.byte	$30
	.byte	$00
	.byte	$00
	.byte	$C0
	.byte	$0C
	.byte	$CF
	.byte	$13
	.byte	$33
	.byte	$C3
	.byte	$FC
	.byte	$F3
	.byte	$3C
	.byte	$CC
	.byte	$8C
	.byte	$33
	.byte	$03
	.byte	$33
	.byte	$0C
	.byte	$03
	.byte	$CC
	.byte	$0C
	.byte	$CC
	.byte	$FF
	.byte	$F3
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FC
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_saltspray:
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$10
	.byte	$2B
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3A
	.byte	$3B
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$28
	.byte	$29
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$35
	.byte	$34
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$36
	.byte	$25
	.byte	$24
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$36
	.byte	$25
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$35
	.byte	$38
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$36
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$20
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$28
	.byte	$29
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$26
	.byte	$35
	.byte	$34
	.byte	$27
	.byte	$30
	.byte	$31
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$36
	.byte	$25
	.byte	$24
	.byte	$37
	.byte	$20
	.byte	$21
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$11
	.byte	$2B
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3A
	.byte	$3B
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$1F
	.byte	$FF
	.byte	$0F
	.byte	$0F
	.byte	$CF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$F0
	.byte	$F0
	.byte	$CC
	.byte	$3F
	.byte	$0C
	.byte	$CF
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$FF
	.byte	$0C
	.byte	$33
	.byte	$00
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$0F
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$03
	.byte	$33
	.byte	$00
	.byte	$C0
	.byte	$00
	.byte	$00
	.byte	$FF
	.byte	$FF
	.byte	$CC
	.byte	$33
	.byte	$00
	.byte	$CC
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$F0
	.byte	$0C
	.byte	$0F
	.byte	$CC
	.byte	$FF
	.byte	$F0
	.byte	$F0
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_twofish:
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$34
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$35
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$11
	.byte	$2B
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$10
	.byte	$2B
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3A
	.byte	$3B
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$3A
	.byte	$3B
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$29
	.byte	$28
	.byte	$29
	.byte	$24
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$25
	.byte	$28
	.byte	$29
	.byte	$28
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$22
	.byte	$23
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$38
	.byte	$39
	.byte	$38
	.byte	$39
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$36
	.byte	$37
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$26
	.byte	$27
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$32
	.byte	$33
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$20
	.byte	$21
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$30
	.byte	$31
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$2C
	.byte	$2D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$3C
	.byte	$3D
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$FF
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$33
	.byte	$00
	.byte	$0F
	.byte	$03
	.byte	$0C
	.byte	$0F
	.byte	$00
	.byte	$CC
	.byte	$33
	.byte	$00
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$CC
	.byte	$33
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$CC
	.byte	$33
	.byte	$00
	.byte	$0F
	.byte	$03
	.byte	$0C
	.byte	$0F
	.byte	$00
	.byte	$CC
	.byte	$F3
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$F0
	.byte	$FC
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$0F
_endgame:
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$C7
	.byte	$E1
	.byte	$ED
	.byte	$E5
	.byte	$A0
	.byte	$EF
	.byte	$F6
	.byte	$E5
	.byte	$F2
	.byte	$A1
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A5
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A5
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$22
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$28
	.byte	$23
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$32
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$38
	.byte	$33
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$B1
	.byte	$B2
	.byte	$B3
	.byte	$F0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$B0
	.byte	$B1
	.byte	$B2
	.byte	$F0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$A0
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$05
	.byte	$05
	.byte	$05
	.byte	$0A
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
	.byte	$00
_SprPlayer1SquidUpFrame1:
	.byte	$00
	.byte	$FF
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$67
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$76
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$77
	.byte	$00
	.byte	$80
_SprPlayer1SquidUpFrame2:
	.byte	$00
	.byte	$FF
	.byte	$66
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$67
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$76
	.byte	$40
	.byte	$80
_SprPlayer1SquidRightFrame1:
	.byte	$00
	.byte	$FF
	.byte	$68
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$69
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$78
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$79
	.byte	$00
	.byte	$80
_SprPlayer1SquidDownFrame1:
	.byte	$00
	.byte	$FF
	.byte	$76
	.byte	$80
	.byte	$08
	.byte	$FF
	.byte	$77
	.byte	$80
	.byte	$00
	.byte	$07
	.byte	$66
	.byte	$80
	.byte	$08
	.byte	$07
	.byte	$67
	.byte	$80
	.byte	$80
_SprPlayer1SquidLeftFrame1:
	.byte	$00
	.byte	$FF
	.byte	$69
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$68
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$79
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$78
	.byte	$40
	.byte	$80
_SprPlayer1SquidRightFrame2:
	.byte	$00
	.byte	$FF
	.byte	$78
	.byte	$80
	.byte	$08
	.byte	$FF
	.byte	$79
	.byte	$80
	.byte	$00
	.byte	$07
	.byte	$68
	.byte	$80
	.byte	$08
	.byte	$07
	.byte	$69
	.byte	$80
	.byte	$80
_SprPlayer1SquidDownFrame2:
	.byte	$00
	.byte	$FF
	.byte	$77
	.byte	$C0
	.byte	$08
	.byte	$FF
	.byte	$76
	.byte	$C0
	.byte	$00
	.byte	$07
	.byte	$67
	.byte	$C0
	.byte	$08
	.byte	$07
	.byte	$66
	.byte	$C0
	.byte	$80
_SprPlayer1SquidLeftFrame2:
	.byte	$00
	.byte	$FF
	.byte	$79
	.byte	$C0
	.byte	$08
	.byte	$FF
	.byte	$78
	.byte	$C0
	.byte	$00
	.byte	$07
	.byte	$69
	.byte	$C0
	.byte	$08
	.byte	$07
	.byte	$68
	.byte	$C0
	.byte	$80
_SprPlayer1SquidDown:
	.addr	_SprPlayer1SquidDownFrame1
	.addr	_SprPlayer1SquidDownFrame2
_SprPlayer1SquidRight:
	.addr	_SprPlayer1SquidRightFrame1
	.addr	_SprPlayer1SquidRightFrame2
_SprPlayer1SquidUp:
	.addr	_SprPlayer1SquidUpFrame1
	.addr	_SprPlayer1SquidUpFrame2
_SprPlayer1SquidLeft:
	.addr	_SprPlayer1SquidLeftFrame1
	.addr	_SprPlayer1SquidLeftFrame2
_SprPlayer1Squid:
	.addr	_SprPlayer1SquidDown
	.addr	_SprPlayer1SquidRight
	.addr	_SprPlayer1SquidUp
	.addr	_SprPlayer1SquidLeft
_SprPlayer2SquidUpFrame2:
	.byte	$00
	.byte	$FF
	.byte	$66
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$67
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$76
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$77
	.byte	$01
	.byte	$80
_SprPlayer2SquidUpFrame1:
	.byte	$00
	.byte	$FF
	.byte	$66
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$67
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$77
	.byte	$41
	.byte	$08
	.byte	$07
	.byte	$76
	.byte	$41
	.byte	$80
_SprPlayer2SquidRightFrame2:
	.byte	$00
	.byte	$FF
	.byte	$68
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$69
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$78
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$79
	.byte	$01
	.byte	$80
_SprPlayer2SquidDownFrame2:
	.byte	$00
	.byte	$FF
	.byte	$76
	.byte	$81
	.byte	$08
	.byte	$FF
	.byte	$77
	.byte	$81
	.byte	$00
	.byte	$07
	.byte	$66
	.byte	$81
	.byte	$08
	.byte	$07
	.byte	$67
	.byte	$81
	.byte	$80
_SprPlayer2SquidLeftFrame2:
	.byte	$00
	.byte	$FF
	.byte	$69
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$68
	.byte	$41
	.byte	$00
	.byte	$07
	.byte	$79
	.byte	$41
	.byte	$08
	.byte	$07
	.byte	$78
	.byte	$41
	.byte	$80
_SprPlayer2SquidRightFrame1:
	.byte	$00
	.byte	$FF
	.byte	$78
	.byte	$81
	.byte	$08
	.byte	$FF
	.byte	$79
	.byte	$81
	.byte	$00
	.byte	$07
	.byte	$68
	.byte	$81
	.byte	$08
	.byte	$07
	.byte	$69
	.byte	$81
	.byte	$80
_SprPlayer2SquidDownFrame1:
	.byte	$00
	.byte	$FF
	.byte	$77
	.byte	$C1
	.byte	$08
	.byte	$FF
	.byte	$76
	.byte	$C1
	.byte	$00
	.byte	$07
	.byte	$67
	.byte	$C1
	.byte	$08
	.byte	$07
	.byte	$66
	.byte	$C1
	.byte	$80
_SprPlayer2SquidLeftFrame1:
	.byte	$00
	.byte	$FF
	.byte	$79
	.byte	$C1
	.byte	$08
	.byte	$FF
	.byte	$78
	.byte	$C1
	.byte	$00
	.byte	$07
	.byte	$69
	.byte	$C1
	.byte	$08
	.byte	$07
	.byte	$68
	.byte	$C1
	.byte	$80
_SprPlayer2SquidDown:
	.addr	_SprPlayer2SquidDownFrame1
	.addr	_SprPlayer2SquidDownFrame2
_SprPlayer2SquidRight:
	.addr	_SprPlayer2SquidRightFrame1
	.addr	_SprPlayer2SquidRightFrame2
_SprPlayer2SquidUp:
	.addr	_SprPlayer2SquidUpFrame1
	.addr	_SprPlayer2SquidUpFrame2
_SprPlayer2SquidLeft:
	.addr	_SprPlayer2SquidLeftFrame1
	.addr	_SprPlayer2SquidLeftFrame2
_SprPlayer2Squid:
	.addr	_SprPlayer2SquidDown
	.addr	_SprPlayer2SquidRight
	.addr	_SprPlayer2SquidUp
	.addr	_SprPlayer2SquidLeft
_SprPlayer1RollerDownFrame1:
	.byte	$00
	.byte	$FF
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$41
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$50
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$51
	.byte	$00
	.byte	$80
_SprPlayer1RollerDownFrame2:
	.byte	$00
	.byte	$FF
	.byte	$42
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$43
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$52
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$53
	.byte	$00
	.byte	$80
_SprPlayer1RollerDown:
	.addr	_SprPlayer1RollerDownFrame1
	.addr	_SprPlayer1RollerDownFrame2
_SprPlayer1RollerRightFrame1:
	.byte	$00
	.byte	$FF
	.byte	$44
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$45
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$54
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$55
	.byte	$00
	.byte	$80
_SprPlayer1RollerRightFrame2:
	.byte	$00
	.byte	$FF
	.byte	$46
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$47
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$56
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$57
	.byte	$00
	.byte	$80
_SprPlayer1RollerRight:
	.addr	_SprPlayer1RollerRightFrame1
	.addr	_SprPlayer1RollerRightFrame2
_SprPlayer1RollerUpFrame1:
	.byte	$00
	.byte	$FF
	.byte	$48
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$49
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$58
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$59
	.byte	$00
	.byte	$80
_SprPlayer1RollerUpFrame2:
	.byte	$00
	.byte	$FF
	.byte	$4A
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$4B
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$5A
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$5B
	.byte	$00
	.byte	$80
_SprPlayer1RollerUp:
	.addr	_SprPlayer1RollerUpFrame1
	.addr	_SprPlayer1RollerUpFrame2
_SprPlayer1RollerLeftFrame1:
	.byte	$00
	.byte	$FF
	.byte	$45
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$44
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$55
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$54
	.byte	$40
	.byte	$80
_SprPlayer1RollerLeftFrame2:
	.byte	$00
	.byte	$FF
	.byte	$47
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$46
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$57
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$56
	.byte	$40
	.byte	$80
_SprPlayer1RollerLeft:
	.addr	_SprPlayer1RollerLeftFrame1
	.addr	_SprPlayer1RollerLeftFrame2
_SprPlayer1Roller:
	.addr	_SprPlayer1RollerDown
	.addr	_SprPlayer1RollerRight
	.addr	_SprPlayer1RollerUp
	.addr	_SprPlayer1RollerLeft
_SprPlayer1ChargerDownFrame1:
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$01
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$11
	.byte	$00
	.byte	$80
_SprPlayer1ChargerDownFrame2:
	.byte	$00
	.byte	$FF
	.byte	$02
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$03
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$12
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$13
	.byte	$00
	.byte	$80
_SprPlayer1ChargerDown:
	.addr	_SprPlayer1ChargerDownFrame1
	.addr	_SprPlayer1ChargerDownFrame2
_SprPlayer1ChargerRightFrame1:
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$05
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$14
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$15
	.byte	$00
	.byte	$80
_SprPlayer1ChargerRightFrame2:
	.byte	$00
	.byte	$FF
	.byte	$06
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$07
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$16
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$17
	.byte	$00
	.byte	$80
_SprPlayer1ChargerRight:
	.addr	_SprPlayer1ChargerRightFrame1
	.addr	_SprPlayer1ChargerRightFrame2
_SprPlayer1ChargerUpFrame1:
	.byte	$00
	.byte	$FF
	.byte	$08
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$09
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$18
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$19
	.byte	$00
	.byte	$80
_SprPlayer1ChargerUpFrame2:
	.byte	$00
	.byte	$FF
	.byte	$0A
	.byte	$00
	.byte	$08
	.byte	$FF
	.byte	$0B
	.byte	$00
	.byte	$00
	.byte	$07
	.byte	$1A
	.byte	$00
	.byte	$08
	.byte	$07
	.byte	$1B
	.byte	$00
	.byte	$80
_SprPlayer1ChargerUp:
	.addr	_SprPlayer1ChargerUpFrame1
	.addr	_SprPlayer1ChargerUpFrame2
_SprPlayer1ChargerLeftFrame1:
	.byte	$00
	.byte	$FF
	.byte	$05
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$04
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$15
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$14
	.byte	$40
	.byte	$80
_SprPlayer1ChargerLeftFrame2:
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$40
	.byte	$08
	.byte	$FF
	.byte	$06
	.byte	$40
	.byte	$00
	.byte	$07
	.byte	$17
	.byte	$40
	.byte	$08
	.byte	$07
	.byte	$16
	.byte	$40
	.byte	$80
_SprPlayer1ChargerLeft:
	.addr	_SprPlayer1ChargerLeftFrame1
	.addr	_SprPlayer1ChargerLeftFrame2
_SprPlayer1Charger:
	.addr	_SprPlayer1ChargerDown
	.addr	_SprPlayer1ChargerRight
	.addr	_SprPlayer1ChargerUp
	.addr	_SprPlayer1ChargerLeft
_SprPlayer1:
	.addr	_SprPlayer1Squid
	.addr	_SprPlayer1Roller
	.addr	_SprPlayer1Charger
_SprPlayer2RollerDownFrame1:
	.byte	$00
	.byte	$FF
	.byte	$40
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$41
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$50
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$51
	.byte	$01
	.byte	$80
_SprPlayer2RollerDownFrame2:
	.byte	$00
	.byte	$FF
	.byte	$42
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$43
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$52
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$53
	.byte	$01
	.byte	$80
_SprPlayer2RollerDown:
	.addr	_SprPlayer2RollerDownFrame1
	.addr	_SprPlayer2RollerDownFrame2
_SprPlayer2RollerRightFrame1:
	.byte	$00
	.byte	$FF
	.byte	$44
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$45
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$54
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$55
	.byte	$01
	.byte	$80
_SprPlayer2RollerRightFrame2:
	.byte	$00
	.byte	$FF
	.byte	$46
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$47
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$56
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$57
	.byte	$01
	.byte	$80
_SprPlayer2RollerRight:
	.addr	_SprPlayer2RollerRightFrame1
	.addr	_SprPlayer2RollerRightFrame2
_SprPlayer2RollerUpFrame1:
	.byte	$00
	.byte	$FF
	.byte	$48
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$49
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$58
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$59
	.byte	$01
	.byte	$80
_SprPlayer2RollerUpFrame2:
	.byte	$00
	.byte	$FF
	.byte	$4A
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$4B
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$5A
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$5B
	.byte	$01
	.byte	$80
_SprPlayer2RollerUp:
	.addr	_SprPlayer2RollerUpFrame1
	.addr	_SprPlayer2RollerUpFrame2
_SprPlayer2RollerLeftFrame1:
	.byte	$00
	.byte	$FF
	.byte	$45
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$44
	.byte	$41
	.byte	$00
	.byte	$07
	.byte	$55
	.byte	$41
	.byte	$08
	.byte	$07
	.byte	$54
	.byte	$41
	.byte	$80
_SprPlayer2RollerLeftFrame2:
	.byte	$00
	.byte	$FF
	.byte	$47
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$46
	.byte	$41
	.byte	$00
	.byte	$07
	.byte	$57
	.byte	$41
	.byte	$08
	.byte	$07
	.byte	$56
	.byte	$41
	.byte	$80
_SprPlayer2RollerLeft:
	.addr	_SprPlayer2RollerLeftFrame1
	.addr	_SprPlayer2RollerLeftFrame2
_SprPlayer2Roller:
	.addr	_SprPlayer2RollerDown
	.addr	_SprPlayer2RollerRight
	.addr	_SprPlayer2RollerUp
	.addr	_SprPlayer2RollerLeft
_SprPlayer2ChargerDownFrame1:
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$01
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$11
	.byte	$01
	.byte	$80
_SprPlayer2ChargerDownFrame2:
	.byte	$00
	.byte	$FF
	.byte	$02
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$03
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$12
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$13
	.byte	$01
	.byte	$80
_SprPlayer2ChargerDown:
	.addr	_SprPlayer2ChargerDownFrame1
	.addr	_SprPlayer2ChargerDownFrame2
_SprPlayer2ChargerRightFrame1:
	.byte	$00
	.byte	$FF
	.byte	$04
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$05
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$14
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$15
	.byte	$01
	.byte	$80
_SprPlayer2ChargerRightFrame2:
	.byte	$00
	.byte	$FF
	.byte	$06
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$07
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$16
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$17
	.byte	$01
	.byte	$80
_SprPlayer2ChargerRight:
	.addr	_SprPlayer2ChargerRightFrame1
	.addr	_SprPlayer2ChargerRightFrame2
_SprPlayer2ChargerUpFrame1:
	.byte	$00
	.byte	$FF
	.byte	$08
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$09
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$18
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$19
	.byte	$01
	.byte	$80
_SprPlayer2ChargerUpFrame2:
	.byte	$00
	.byte	$FF
	.byte	$0A
	.byte	$01
	.byte	$08
	.byte	$FF
	.byte	$0B
	.byte	$01
	.byte	$00
	.byte	$07
	.byte	$1A
	.byte	$01
	.byte	$08
	.byte	$07
	.byte	$1B
	.byte	$01
	.byte	$80
_SprPlayer2ChargerUp:
	.addr	_SprPlayer2ChargerUpFrame1
	.addr	_SprPlayer2ChargerUpFrame2
_SprPlayer2ChargerLeftFrame1:
	.byte	$00
	.byte	$FF
	.byte	$05
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$04
	.byte	$41
	.byte	$00
	.byte	$07
	.byte	$15
	.byte	$41
	.byte	$08
	.byte	$07
	.byte	$14
	.byte	$41
	.byte	$80
_SprPlayer2ChargerLeftFrame2:
	.byte	$00
	.byte	$FF
	.byte	$07
	.byte	$41
	.byte	$08
	.byte	$FF
	.byte	$06
	.byte	$41
	.byte	$00
	.byte	$07
	.byte	$17
	.byte	$41
	.byte	$08
	.byte	$07
	.byte	$16
	.byte	$41
	.byte	$80
_SprPlayer2ChargerLeft:
	.addr	_SprPlayer2ChargerLeftFrame1
	.addr	_SprPlayer2ChargerLeftFrame2
_SprPlayer2Charger:
	.addr	_SprPlayer2ChargerDown
	.addr	_SprPlayer2ChargerRight
	.addr	_SprPlayer2ChargerUp
	.addr	_SprPlayer2ChargerLeft
_SprPlayer2:
	.addr	_SprPlayer2Squid
	.addr	_SprPlayer2Roller
	.addr	_SprPlayer2Charger
_SprPlayers:
	.addr	_SprPlayer1
	.addr	_SprPlayer2
_judd_left:
	.byte	$00
	.byte	$00
	.byte	$60
	.byte	$01
	.byte	$08
	.byte	$00
	.byte	$61
	.byte	$01
	.byte	$10
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$20
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$70
	.byte	$01
	.byte	$08
	.byte	$08
	.byte	$71
	.byte	$01
	.byte	$10
	.byte	$08
	.byte	$72
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$73
	.byte	$00
	.byte	$20
	.byte	$08
	.byte	$74
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$80
	.byte	$01
	.byte	$08
	.byte	$10
	.byte	$81
	.byte	$01
	.byte	$10
	.byte	$10
	.byte	$82
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$83
	.byte	$00
	.byte	$20
	.byte	$10
	.byte	$84
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$90
	.byte	$01
	.byte	$08
	.byte	$18
	.byte	$91
	.byte	$01
	.byte	$10
	.byte	$18
	.byte	$92
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$93
	.byte	$00
	.byte	$20
	.byte	$18
	.byte	$94
	.byte	$00
	.byte	$80
_judd_tie:
	.byte	$00
	.byte	$00
	.byte	$65
	.byte	$00
	.byte	$08
	.byte	$00
	.byte	$62
	.byte	$00
	.byte	$10
	.byte	$00
	.byte	$63
	.byte	$00
	.byte	$18
	.byte	$00
	.byte	$64
	.byte	$00
	.byte	$00
	.byte	$08
	.byte	$75
	.byte	$00
	.byte	$08
	.byte	$08
	.byte	$72
	.byte	$00
	.byte	$10
	.byte	$08
	.byte	$73
	.byte	$00
	.byte	$18
	.byte	$08
	.byte	$74
	.byte	$00
	.byte	$00
	.byte	$10
	.byte	$85
	.byte	$00
	.byte	$08
	.byte	$10
	.byte	$82
	.byte	$00
	.byte	$10
	.byte	$10
	.byte	$83
	.byte	$00
	.byte	$18
	.byte	$10
	.byte	$84
	.byte	$00
	.byte	$00
	.byte	$18
	.byte	$95
	.byte	$00
	.byte	$08
	.byte	$18
	.byte	$92
	.byte	$00
	.byte	$10
	.byte	$18
	.byte	$93
	.byte	$00
	.byte	$18
	.byte	$18
	.byte	$94
	.byte	$00
	.byte	$80
_judd_right:
	.byte	$20
	.byte	$00
	.byte	$60
	.byte	$42
	.byte	$18
	.byte	$00
	.byte	$61
	.byte	$42
	.byte	$10
	.byte	$00
	.byte	$62
	.byte	$40
	.byte	$08
	.byte	$00
	.byte	$63
	.byte	$40
	.byte	$00
	.byte	$00
	.byte	$64
	.byte	$40
	.byte	$20
	.byte	$08
	.byte	$70
	.byte	$42
	.byte	$18
	.byte	$08
	.byte	$71
	.byte	$42
	.byte	$10
	.byte	$08
	.byte	$72
	.byte	$40
	.byte	$08
	.byte	$08
	.byte	$73
	.byte	$40
	.byte	$00
	.byte	$08
	.byte	$74
	.byte	$40
	.byte	$20
	.byte	$10
	.byte	$80
	.byte	$42
	.byte	$18
	.byte	$10
	.byte	$81
	.byte	$42
	.byte	$10
	.byte	$10
	.byte	$82
	.byte	$40
	.byte	$08
	.byte	$10
	.byte	$83
	.byte	$40
	.byte	$00
	.byte	$10
	.byte	$84
	.byte	$40
	.byte	$20
	.byte	$18
	.byte	$90
	.byte	$42
	.byte	$18
	.byte	$18
	.byte	$91
	.byte	$42
	.byte	$10
	.byte	$18
	.byte	$92
	.byte	$40
	.byte	$08
	.byte	$18
	.byte	$93
	.byte	$40
	.byte	$00
	.byte	$18
	.byte	$94
	.byte	$40
	.byte	$80
_unselected_roller:
	.byte	$00
	.byte	$FF
	.byte	$40
	.byte	$02
	.byte	$08
	.byte	$FF
	.byte	$41
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$50
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$51
	.byte	$02
	.byte	$80
_unselected_charger:
	.byte	$00
	.byte	$FF
	.byte	$00
	.byte	$02
	.byte	$08
	.byte	$FF
	.byte	$01
	.byte	$02
	.byte	$00
	.byte	$07
	.byte	$10
	.byte	$02
	.byte	$08
	.byte	$07
	.byte	$11
	.byte	$02
	.byte	$80
_palTitle:
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$0F
	.byte	$30
	.byte	$0F
	.byte	$0F
_palInkable:
	.byte	$0F
	.byte	$10
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$04
	.byte	$14
	.byte	$24
	.byte	$0F
	.byte	$19
	.byte	$29
	.byte	$3A
	.byte	$0F
	.byte	$01
	.byte	$21
	.byte	$31
_palEndgame:
	.byte	$0F
	.byte	$30
	.byte	$30
	.byte	$30
	.byte	$0F
	.byte	$24
	.byte	$24
	.byte	$14
	.byte	$0F
	.byte	$29
	.byte	$29
	.byte	$3A
	.byte	$0F
	.byte	$21
	.byte	$21
	.byte	$11
_palPaused:
	.byte	$0F
	.byte	$2D
	.byte	$2D
	.byte	$2D
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$2D
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$2D
	.byte	$0F
	.byte	$00
	.byte	$30
	.byte	$30
_palCharacters:
	.byte	$0F
	.byte	$04
	.byte	$30
	.byte	$0F
	.byte	$0F
	.byte	$19
	.byte	$30
	.byte	$0F
_palCharPaused:
	.byte	$0F
	.byte	$00
	.byte	$2D
	.byte	$0F
	.byte	$0F
	.byte	$00
	.byte	$2D
	.byte	$0F
_palJudd:
	.byte	$0F
	.byte	$26
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$14
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$2A
	.byte	$27
	.byte	$30
	.byte	$0F
	.byte	$26
	.byte	$27
	.byte	$30
_versionStr:
	.byte	$E6
	.byte	$E8
	.byte	$F1
	.byte	$E7
	.byte	$F1
	.byte	$ED
_victoryMsg:
	.byte	$56,$69,$63,$74,$6F,$72,$79,$21,$00
_fourSpaces:
	.byte	$20,$20,$20,$20,$00
_tieMsg:
	.byte	$49,$74,$27,$73,$20,$61,$20,$74,$69,$65,$21,$00
_zero:
	.byte	$00
_credits_0:
	.byte	$20,$20,$20,$20,$20,$20,$53,$70,$6C,$61,$74,$6F,$6F,$44,$00
_credits_1:
	.byte	$20,$61,$20,$53,$70,$6C,$61,$74,$6F,$6F,$6E,$20,$64,$65,$6D,$61
	.byte	$6B,$65,$00
_credits_2:
	.byte	$20,$20,$20,$20,$50,$72,$6F,$6A,$65,$63,$74,$20,$4C,$65,$61,$64
	.byte	$00
_credits_3:
	.byte	$20,$20,$4A,$6F,$68,$6E,$20,$43,$61,$72,$6D,$61,$63,$6B,$65,$72
	.byte	$65,$6C,$00
_credits_4:
	.byte	$20,$20,$20,$20,$20,$20,$20,$4D,$75,$73,$69,$63,$00
_credits_5:
	.byte	$20,$4E,$6F,$62,$75,$6F,$20,$53,$71,$75,$69,$64,$69,$6D,$61,$74
	.byte	$73,$75,$00
_credits_6:
	.byte	$20,$20,$54,$69,$74,$6C,$65,$20,$26,$20,$50,$6F,$73,$74,$67,$61
	.byte	$6D,$65,$00
_credits_7:
	.byte	$20,$20,$20,$4B,$6F,$6A,$69,$20,$49,$6B,$61,$72,$61,$73,$68,$69
	.byte	$00
_credits_8:
	.byte	$20,$20,$20,$20,$47,$61,$6D,$65,$20,$44,$65,$73,$69,$67,$6E,$00
_credits_9:
	.byte	$20,$20,$20,$53,$71,$75,$69,$64,$65,$6F,$20,$4B,$6F,$6A,$69,$6D
	.byte	$61,$00
_credits_10:
	.byte	$20,$20,$20,$20,$20,$20,$47,$72,$61,$70,$68,$69,$63,$73,$00
_credits_11:
	.byte	$20,$20,$20,$20,$53,$71,$75,$69,$64,$20,$4D,$65,$69,$65,$72,$00
_credits_12:
	.byte	$20,$20,$20,$47,$61,$6D,$65,$20,$4D,$65,$63,$68,$61,$6E,$69,$63
	.byte	$73,$00
_credits_13:
	.byte	$20,$20,$41,$6D,$65,$72,$69,$63,$61,$6E,$20,$4D,$63,$47,$69,$6C
	.byte	$6C,$00
_credits_14:
	.byte	$20,$20,$20,$41,$49,$20,$50,$72,$6F,$67,$72,$61,$6D,$6D,$69,$6E
	.byte	$67,$00
_credits_15:
	.byte	$20,$20,$53,$69,$6D,$6F,$6E,$20,$55,$2E,$20,$52,$69,$63,$68,$74
	.byte	$65,$72,$00
_credits_16:
	.byte	$20,$53,$70,$6C,$61,$74,$6F,$6F,$6E,$20,$28,$43,$29,$20,$32,$30
	.byte	$31,$35,$00
_credits_17:
	.byte	$20,$20,$20,$20,$20,$20,$4E,$69,$6E,$74,$65,$6E,$64,$6F,$00
_credits_18:
	.byte	$54,$68,$61,$6E,$6B,$73,$20,$66,$6F,$72,$20,$70,$6C,$61,$79,$69
	.byte	$6E,$67,$21,$00
_select_map:
	.byte	$53,$65,$6C,$65,$63,$74,$20,$4D,$61,$70,$00
_level_kelpdome:
	.byte	$4B,$65,$6C,$70,$20,$44,$6F,$6D,$65,$00
_level_bluefin_depot:
	.byte	$42,$6C,$75,$65,$66,$69,$6E,$20,$44,$65,$70,$6F,$74,$00
_level_saltspray:
	.byte	$53,$61,$6C,$74,$73,$70,$72,$61,$79,$20,$52,$69,$67,$00
_level_twofish:
	.byte	$54,$77,$6F,$20,$46,$69,$73,$68,$00
_levelList:
	.addr	_kelpdome
	.addr	_palInkable
	.addr	_palCharacters
	.addr	_level_kelpdome
	.addr	_bluefin_depot
	.addr	_palInkable
	.addr	_palCharacters
	.addr	_level_bluefin_depot
	.addr	_saltspray
	.addr	_palInkable
	.addr	_palCharacters
	.addr	_level_saltspray
	.addr	_twofish
	.addr	_palInkable
	.addr	_palCharacters
	.addr	_level_twofish
_select_weapon:
	.byte	$53,$65,$6C,$65,$63,$74,$20,$57,$65,$61,$70,$6F,$6E,$00
_projectile_speed:
	.word	$0000
	.word	$0080
	.word	$0100
_weapon_ranges:
	.byte	$00
	.byte	$04
	.byte	$10
_weapon_cooldown:
	.byte	$00
	.byte	$20
	.byte	$08
_weapon_movement_speed:
	.byte	$00
	.byte	$18
	.byte	$30
_updateListData:
	.byte	$FF
_dirs:
	.byte	$40
	.byte	$10
	.byte	$80
	.byte	$20

.segment	"BSS"

_map:
	.res	240,$00
_palette_state:
	.res	64,$00
.segment	"ZEROPAGE"
_i:
	.res	1,$00
_j:
	.res	1,$00
_k:
	.res	1,$00
_ptr:
	.res	1,$00
_spr:
	.res	1,$00
_px:
	.res	1,$00
_py:
	.res	1,$00
_wait:
	.res	1,$00
_i16:
	.res	2,$00
_sum:
	.res	2,$00
_divvar:
	.res	2,$00
_nameRow:
	.res	32,$00
_player_all:
	.res	1,$00
_player_x_spawn:
	.res	4,$00
_player_y_spawn:
	.res	4,$00
_player_x:
	.res	4,$00
_player_y:
	.res	4,$00
_player_dir_index:
	.res	2,$00
_player_dir:
	.res	2,$00
_player_cnt:
	.res	4,$00
_player_speed:
	.res	4,$00
_player_wait:
	.res	2,$00
_player_cooldown:
	.res	2,$00
_player_anim_cnt:
	.res	2,$00
_player_diag_flip:
	.res	2,$00
_player_wpn:
	.res	2,$00
_player_charge:
	.res	2,$00
_player_mode:
	.res	2,$00
_player_ai:
	.res	2,$00
_ai_aggression:
	.res	2,$00
_projectile_x:
	.res	4,$00
_projectile_y:
	.res	4,$00
_projectile_dir:
	.res	2,$00
_projectile_cnt:
	.res	4,$00
_projectile_dist:
	.res	2,$00
_game_level:
	.res	1,$00
_game_done:
	.res	1,$00
_game_paused:
	.res	1,$00
_frame_cnt:
	.res	1,$00
_anim_frame:
	.res	1,$00
_spr_dir:
	.res	1,$00
_bright:
	.res	1,$00
_timer:
	.res	1,$00
_update_list:
	.res	40,$00

; ---------------------------------------------------------------
; void __near__ music_play (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_music_play: near

.segment	"CODE"

;
; void music_play(unsigned char song){
;
	jsr     pusha
;
; music_play_gated(song,15);
;
	ldy     #$00
	lda     (sp),y
	jsr     pusha
	lda     #$0F
	jsr     _music_play_gated
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ sfx_play_damped (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_sfx_play_damped: near

.segment	"CODE"

;
; void sfx_play_damped(unsigned char sound,unsigned char channel, unsigned char dampening){
;
	jsr     pusha
;
; sfx_play(sound,channel|(dampening<<2));
;
	ldy     #$02
	lda     (sp),y
	jsr     pusha
	ldy     #$01
	lda     (sp),y
	asl     a
	asl     a
	iny
	ora     (sp),y
	jsr     _sfx_play
;
; };
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ insert_into_update_list (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_insert_into_update_list: near

.segment	"CODE"

;
; void insert_into_update_list(unsigned char addr1, unsigned char addr2, unsigned char value) {
;
	jsr     pusha
;
; update_list[update_list_index] = addr1;
;
	ldy     #$02
	lda     (sp),y
	ldy     _update_list_index
	sta     _update_list,y
;
; update_list[update_list_index+1] = addr2;
;
	ldx     #$00
	lda     _update_list_index
	clc
	adc     #$01
	bcc     L2764
	inx
	clc
L2764:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	ldy     #$01
	lda     (sp),y
	dey
	sta     (ptr1),y
;
; update_list[update_list_index+2] = value;
;
	ldx     #$00
	lda     _update_list_index
	clc
	adc     #$02
	bcc     L2765
	inx
	clc
L2765:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     (sp),y
	sta     (ptr1),y
;
; update_list[update_list_index+3] = NT_UPD_EOF;
;
	ldx     #$00
	lda     _update_list_index
	clc
	adc     #$03
	bcc     L2766
	inx
	clc
L2766:	adc     #<(_update_list)
	sta     ptr1
	txa
	adc     #>(_update_list)
	sta     ptr1+1
	lda     #$FF
	sta     (ptr1),y
;
; update_list_index += 3;
;
	lda     #$03
	clc
	adc     _update_list_index
	sta     _update_list_index
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ set_tile_at (unsigned int, unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_tile_at: near

.segment	"CODE"

;
; void set_tile_at(unsigned int nametable, unsigned char x, unsigned char y, unsigned char value) {
;
	jsr     pusha
;
; unsigned char a = (nametable + y * 32) >> 8;
;
	ldx     #$00
	ldy     #$01
	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	ldy     #$03
	adc     (sp),y
	lda     tmp1
	iny
	adc     (sp),y
	jsr     pusha
;
; unsigned char b = y * 32 + x;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	sta     ptr1
	iny
	lda     (sp),y
	clc
	adc     ptr1
	jsr     pusha
;
; insert_into_update_list(a,b,value);
;
	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	jsr     _insert_into_update_list
;
; }
;
	jmp     incsp7

.endproc

; ---------------------------------------------------------------
; void __near__ clear_update_list (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_clear_update_list: near

.segment	"CODE"

;
; update_list_index = 0;
;
	lda     #$00
	sta     _update_list_index
;
; update_list[0] = NT_UPD_EOF;
;
	lda     #$FF
	sta     _update_list
;
; }
;
	rts

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ get_tile_palette (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_get_tile_palette: near

.segment	"CODE"

;
; unsigned char get_tile_palette(unsigned char x_idx, unsigned char y_idx) {
;
	jsr     pusha
;
; palette_address =  (y_idx / 2) * 8 + x_idx / 2;
;
	jsr     decsp3
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	lsr     a
	jsr     shlax3
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	iny
	lda     (sp),y
	lsr     a
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
	ldy     #$01
	sta     (sp),y
;
; palette_shift_val = (y_idx % 2)*4 + (x_idx % 2)*2;
;
	ldy     #$03
	lda     (sp),y
	and     #$01
	jsr     shlax2
	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L276B
	inx
	clc
L276B:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
	ldy     #$00
	sta     (sp),y
;
; palette_mask = (0x03 << palette_shift_val);
;
	tay
	lda     #$03
L2769:	asl     a
	dey
	bpl     L2769
	ror     a
	ldy     #$02
	sta     (sp),y
;
; return (palette_state[palette_address]&palette_mask)>>palette_shift_val;
;
	dey
	lda     (sp),y
	tay
	lda     _palette_state,y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	and     ptr1
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     ptr1
L276A:	lsr     a
	dey
	bpl     L276A
	rol     a
	ldx     #$00
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ set_tile_palette (unsigned char, unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_set_tile_palette: near

.segment	"CODE"

;
; void set_tile_palette(unsigned char x_idx, unsigned char y_idx, unsigned char value) {
;
	jsr     pusha
;
; palette_address =  (y_idx / 2) * 8 + x_idx / 2;
;
	jsr     decsp3
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	lsr     a
	jsr     shlax3
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	iny
	lda     (sp),y
	lsr     a
	clc
	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
	ldy     #$01
	sta     (sp),y
;
; palette_shift_val = (y_idx % 2)*4 + (x_idx % 2)*2;
;
	ldy     #$04
	lda     (sp),y
	and     #$01
	jsr     shlax2
	sta     ptr1
	stx     ptr1+1
	iny
	lda     (sp),y
	ldx     #$00
	and     #$01
	asl     a
	bcc     L276E
	inx
	clc
L276E:	adc     ptr1
	pha
	txa
	adc     ptr1+1
	pla
	ldy     #$00
	sta     (sp),y
;
; palette_mask = ~(0x03 << palette_shift_val);
;
	tay
	lda     #$03
L276F:	asl     a
	dey
	bpl     L276F
	ror     a
	eor     #$FF
	ldy     #$02
	sta     (sp),y
;
; palette_state[palette_address] = (palette_state[palette_address] & palette_mask) + (value << palette_shift_val);
;
	lda     #<(_palette_state)
	ldx     #>(_palette_state)
	dey
	clc
	adc     (sp),y
	bcc     L1DB0
	inx
L1DB0:	sta     ptr2
	stx     ptr2+1
	lda     (sp),y
	tay
	lda     _palette_state,y
	sta     ptr1
	ldy     #$02
	lda     (sp),y
	and     ptr1
	sta     sreg
	iny
	lda     (sp),y
	sta     ptr1
	ldy     #$00
	lda     (sp),y
	tay
	lda     ptr1
L2770:	asl     a
	dey
	bpl     L2770
	ror     a
	clc
	adc     sreg
	ldy     #$00
	sta     (ptr2),y
;
; insert_into_update_list((NAMETABLE_A >> 8) + 3, 0xc0 + palette_address, palette_state[palette_address]);
;
	jsr     decsp2
	lda     #$23
	iny
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$C0
	ldy     #$00
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	tay
	lda     _palette_state,y
	jsr     _insert_into_update_list
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ reset_palette_state (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_reset_palette_state: near

.segment	"CODE"

;
; for (i = 0; i < 64; i++) {
;
	jsr     decsp1
	lda     #$00
	tay
L2773:	sta     (sp),y
	cmp     #$40
	bcs     L1DC0
;
; palette_state[i] = 0;
;
	lda     (sp),y
	tay
	lda     #$00
	sta     _palette_state,y
;
; for (i = 0; i < 64; i++) {
;
	tay
	lda     (sp),y
	clc
	adc     #$01
	jmp     L2773
;
; }
;
L1DC0:	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ score_player (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_score_player: near

.segment	"CODE"

;
; unsigned int score_player(unsigned char player_id) {
;
	jsr     pusha
;
; unsigned int score = 0;
;
	jsr     decsp2
	jsr     push0
;
; mask = player_id + 1;
;
	jsr     decsp1
	ldy     #$05
	lda     (sp),y
	clc
	adc     #$01
	dey
	sta     (sp),y
;
; mask = ((mask << 2) | mask );
;
	asl     a
	asl     a
	sta     ptr1
	lda     (sp),y
	ora     ptr1
	sta     (sp),y
;
; mask = ((mask << 4) | mask );
;
	asl     a
	asl     a
	asl     a
	asl     a
	sta     ptr1
	lda     (sp),y
	ora     ptr1
	sta     (sp),y
;
; for (i = 0; i < 64; i++) {
;
	lda     #$00
	tay
L2778:	sta     (sp),y
	cmp     #$40
	bcs     L1DDB
;
; intermediate = palette_state[i] ^ (~ mask);
;
	lda     (sp),y
	tay
	lda     _palette_state,y
	sta     ptr1
	ldy     #$04
	lda     (sp),y
	eor     #$FF
	eor     ptr1
	dey
	sta     (sp),y
;
; intermediate = 0x55 & intermediate & (intermediate >> 1);
;
	and     #$55
	sta     ptr1
	ldx     #$00
	lda     (sp),y
	lsr     a
	and     ptr1
	sta     (sp),y
;
; intermediate = (intermediate >> 4) + (intermediate & 0x0f);
;
	lsr     a
	lsr     a
	lsr     a
	lsr     a
	sta     ptr1
	lda     (sp),y
	and     #$0F
	clc
	adc     ptr1
	sta     (sp),y
;
; score += (intermediate >> 2) + (intermediate & 0x03);
;
	lsr     a
	lsr     a
	sta     ptr1
	lda     (sp),y
	and     #$03
	clc
	adc     ptr1
	bcc     L2777
	inx
L2777:	ldy     #$01
	jsr     addeqysp
;
; for (i = 0; i < 64; i++) {
;
	ldy     #$00
	lda     (sp),y
	clc
	adc     #$01
	jmp     L2778
;
; return score;
;
L1DDB:	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ can_ink (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_can_ink: near

.segment	"CODE"

;
; unsigned char can_ink(unsigned char map_type) {
;
	jsr     pusha
;
; if (map_type == 0x2c ||
;
	ldy     #$00
	lda     (sp),y
	cmp     #$2C
	beq     L2779
;
; map_type == 0x2d ||
;
	cmp     #$2D
	beq     L2779
;
; map_type == 0x3c ||
;
	cmp     #$3C
	beq     L2779
;
; map_type == 0x3d ||
;
	cmp     #$3D
	beq     L2779
;
; map_type == 0x2a ||
;
	cmp     #$2A
	beq     L2779
;
; map_type == 0x2b ||
;
	cmp     #$2B
	beq     L2779
;
; map_type == 0x3a ||
;
	cmp     #$3A
	beq     L2779
;
; map_type == 0x3b) {
;
	cmp     #$3B
	beq     L2779
	ldx     #$00
	jmp     L277A
;
; return FALSE;
;
L2779:	ldx     #$00
	txa
	jmp     incsp1
;
; return TRUE;
;
L277A:	lda     #$01
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ show_title (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_title: near

.segment	"RODATA"

L1E26:
	.word	$0000
L1E3C:
	.word	$0000
L1E4F:
	.word	$0000
L1E65:
	.word	$0000
L1E7B:
	.word	$0000
L1E91:
	.word	$0000

.segment	"CODE"

;
; ppu_off();
;
	jsr     _ppu_off
;
; bank_bg(0);
;
	lda     #$00
	jsr     _bank_bg
;
; scroll(0,TITLE_ROLL_HEIGHT);
;
	jsr     push0
	lda     #$6E
	jsr     _scroll
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(splat_title,sizeof(splat_title));
;
	lda     #<(_splat_title)
	ldx     #>(_splat_title)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; vram_adr(NAMETABLE_A+0x342);
;
	ldx     #$23
	lda     #$42
	jsr     _vram_adr
;
; vram_write(versionStr,sizeof(versionStr));
;
	lda     #<(_versionStr)
	ldx     #>(_versionStr)
	jsr     pushax
	ldx     #$00
	lda     #$06
	jsr     _vram_write
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; pal_bg(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; ppu_on_bg();
;
	jsr     _ppu_on_bg
;
; WAIT_WITH_SKIP(20);
;
	lda     #$14
	sta     _wait
L277B:	lda     _wait
	beq     L277D
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L277B
	jmp     L2787
;
; frame_cnt=0;
;
L277D:	sta     _frame_cnt
;
; wait=10;
;
	lda     #$0A
	sta     _wait
;
; frame_cnt += 2;
;
L277E:	lda     #$02
	clc
	adc     _frame_cnt
	sta     _frame_cnt
;
; scroll(0,TITLE_ROLL_HEIGHT-frame_cnt);
;
	jsr     push0
	lda     #$6E
	sec
	sbc     _frame_cnt
	jsr     _scroll
;
; if (frame_cnt == TITLE_ROLL_HEIGHT) break;
;
	lda     _frame_cnt
	cmp     #$6E
	beq     L277F
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; if ((pad_trigger(0) | pad_trigger(1)) & PAD_START) {
;
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L277E
;
; goto _skip_title;
;
	jmp     L2787
;
; scroll(0,0);
;
L277F:	jsr     push0
	jsr     _scroll
;
; WAIT_WITH_SKIP(20);
;
	lda     #$14
	sta     _wait
L2780:	lda     _wait
	beq     L1E43
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L2780
	jmp     L2787
;
; sfx_play(SFX_SPLAT,0);
;
L1E43:	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_col(10,0x27);
;
	lda     #$0A
	jsr     pusha
	lda     #$27
	jsr     _pal_col
;
; WAIT_WITH_SKIP(20);
;
	lda     #$14
	sta     _wait
L2781:	lda     _wait
	beq     L1E59
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L2781
	jmp     L2787
;
; sfx_play(SFX_SPLAT,0);
;
L1E59:	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_col(2,0x14);
;
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     _pal_col
;
; WAIT_WITH_SKIP(20);
;
	lda     #$14
	sta     _wait
L2782:	lda     _wait
	beq     L1E6F
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L2782
	jmp     L2787
;
; sfx_play(SFX_SPLAT,0);
;
L1E6F:	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; pal_col(6,0x29);
;
	lda     #$06
	jsr     pusha
	lda     #$29
	jsr     _pal_col
;
; WAIT_WITH_SKIP(20);
;
	lda     #$14
	sta     _wait
L2783:	lda     _wait
	beq     L1E85
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L2783
	jmp     L2787
;
; music_play(MUSIC_TITLE);
;
L1E85:	lda     #$05
	jsr     _music_play
;
; pal_col(3,0x30);
;
	lda     #$03
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; pal_col(15,0x30);
;
	lda     #$0F
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; wait = 10;
;
	lda     #$0A
	sta     _wait
;
; frame_cnt = 0;
;
	lda     #$00
	sta     _frame_cnt
;
; wait--;
;
L2784:	dec     _wait
;
; if (!wait) {
;
	bne     L1EA3
;
; pal_col(15,(frame_cnt&1)?0x30:0x20);
;
	lda     #$0F
	jsr     pusha
	lda     _frame_cnt
	and     #$01
	beq     L2785
	lda     #$30
	jmp     L2786
L2785:	lda     #$20
L2786:	jsr     _pal_col
;
; wait = 10;
;
	lda     #$0A
	sta     _wait
;
; frame_cnt++;
;
	inc     _frame_cnt
;
; ppu_wait_frame();
;
L1EA3:	jsr     _ppu_wait_frame
;
; if ((pad_trigger(0) | pad_trigger(1)) & PAD_START) {
;
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L2784
;
; scroll(0,0);
;
L2787:	jsr     push0
	jsr     _scroll
;
; pal_bg(palTitle);
;
	lda     #<(_palTitle)
	ldx     #>(_palTitle)
	jsr     _pal_bg
;
; pal_col(10,0x27);
;
	lda     #$0A
	jsr     pusha
	lda     #$27
	jsr     _pal_col
;
; pal_col(2,0x14);
;
	lda     #$02
	jsr     pusha
	lda     #$14
	jsr     _pal_col
;
; pal_col(6,0x29);
;
	lda     #$06
	jsr     pusha
	lda     #$29
	jsr     _pal_col
;
; pal_col(3,0x30);
;
	lda     #$03
	jsr     pusha
	lda     #$30
	jsr     _pal_col
;
; music_stop();
;
	jsr     _music_stop
;
; sfx_play(SFX_START,0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; for (i=0;i<16;++i) {
;
	lda     #$00
	sta     _i
L2788:	lda     _i
	cmp     #$10
	bcs     L1ECD
;
; pal_col(15, (i & 1) ? 0x0f : 0x20);
;
	lda     #$0F
	jsr     pusha
	lda     _i
	and     #$01
	beq     L2789
	lda     #$0F
	jmp     L278A
L2789:	lda     #$20
L278A:	jsr     _pal_col
;
; delay(4);
;
	lda     #$04
	jsr     _delay
;
; for (i=0;i<16;++i) {
;
	inc     _i
	jmp     L2788
;
; }
;
L1ECD:	rts

.endproc

; ---------------------------------------------------------------
; void __near__ put_num (unsigned int, unsigned int, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_put_num: near

.segment	"CODE"

;
; void put_num(unsigned int adr,unsigned int num,unsigned char len) {
;
	jsr     pusha
;
; vram_adr(adr);
;
	ldy     #$04
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; if (len>2) vram_put(NUM_START+(num/100)%10);
;
	ldy     #$00
	lda     (sp),y
	cmp     #$03
	bcc     L278C
	ldy     #$04
	jsr     pushwysp
	lda     #$64
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$B0
	jsr     _vram_put
;
; if (len>1) vram_put(NUM_START+(num/10)%10);
;
	ldy     #$00
L278C:	lda     (sp),y
	cmp     #$02
	bcc     L1EE7
	ldy     #$04
	jsr     pushwysp
	lda     #$0A
	jsr     tosudiva0
	jsr     pushax
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$B0
	jsr     _vram_put
;
; vram_put(NUM_START+(num%10));
;
L1EE7:	ldy     #$04
	jsr     pushwysp
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$B0
	jsr     _vram_put
;
; }
;
	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ print_str (unsigned int, __near__ const unsigned char *)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_print_str: near

.segment	"CODE"

;
; void print_str(unsigned int adr, const unsigned char * str) {
;
	jsr     pushax
;
; vram_adr(adr);
;
	ldy     #$03
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	jsr     _vram_adr
;
; while (*str) {
;
	jmp     L1EF6
;
; vram_put((*str)+0x80);
;
L1EF4:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	clc
	adc     #$80
	jsr     _vram_put
;
; str++;
;
	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L1EFD
	inx
L1EFD:	jsr     stax0sp
;
; while (*str) {
;
L1EF6:	ldy     #$01
	lda     (sp),y
	sta     ptr1+1
	dey
	lda     (sp),y
	sta     ptr1
	lda     (ptr1),y
	bne     L1EF4
;
; }
;
	jmp     incsp4

.endproc

; ---------------------------------------------------------------
; void __near__ show_select_map (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_select_map: near

.segment	"CODE"

;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; music_play(MUSIC_STAGE_SELECT);
;
	lda     #$06
	jsr     _music_play
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palEndgame);
;
	lda     #<(_palEndgame)
	ldx     #>(_palEndgame)
	jsr     _pal_bg
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0xa0,1024-64);
;
	lda     #$A0
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_fill(0,64);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$40
	jsr     _vram_fill
;
; print_str(NAMETABLE_A+0x0EB,select_map);
;
	ldx     #$20
	lda     #$EB
	jsr     pushax
	lda     #<(_select_map)
	ldx     #>(_select_map)
	jsr     _print_str
;
; for (i = 0; i < LEVELS_ALL; ++i) {
;
	lda     #$00
	sta     _i
L278D:	lda     _i
	cmp     #$04
	bcs     L1F14
;
; print_str(NAMETABLE_A+0x148+0x20*i,levelList[i*LEVEL_ENTRY+3]);
;
	ldx     #$00
	lda     _i
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$48
	pha
	lda     tmp1
	adc     #$21
	tax
	pla
	jsr     pushax
	ldx     #$00
	lda     _i
	jsr     shlax2
	clc
	adc     #$03
	bcc     L1F1F
	inx
L1F1F:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_str
;
; for (i = 0; i < LEVELS_ALL; ++i) {
;
	inc     _i
	jmp     L278D
;
; ppu_on_bg();
;
L1F14:	jsr     _ppu_on_bg
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; int tmp = NAMETABLE_A + 0x146 + 0x20 * game_level;
;
	ldx     #$00
L278E:	lda     _game_level
	jsr     shlax4
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #$46
	pha
	lda     tmp1
	adc     #$21
	tax
	pla
	jsr     pushax
;
; insert_into_update_list(tmp>>8,tmp&0xFF,'*'+0x80);
;
	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     #$AA
	jsr     _insert_into_update_list
;
; ppu_wait_frame();
;
L1F2E:	jsr     _ppu_wait_frame
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; j = pad_trigger(0) | pad_trigger(1);
;
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	sta     _j
;
; if (j & PAD_START) return;
;
	and     #$08
	cmp     #$00
	jne     incsp2
;
; if (j & PAD_UP) {
;
	lda     _j
	and     #$10
	beq     L2793
;
; insert_into_update_list(tmp>>8,tmp&0xFF,' '+0x80);
;
	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     #$A0
	jsr     _insert_into_update_list
;
; if (game_level == 0) {
;
	ldx     #$00
	lda     _game_level
	bne     L2792
;
; game_level = LEVELS_ALL-1;
;
	lda     #$03
;
; } else {
;
	jmp     L2796
;
; game_level -= 1;
;
L2792:	dec     _game_level
;
; break;
;
	jmp     L1F2F
;
; if (j & PAD_SELECT || j & PAD_DOWN) {
;
L2793:	lda     _j
	and     #$04
	bne     L2794
	lda     _j
	and     #$20
	beq     L1F2E
;
; insert_into_update_list(tmp>>8,tmp&0xFF,' '+0x80);
;
L2794:	jsr     decsp2
	ldy     #$03
	lda     (sp),y
	ldy     #$01
	sta     (sp),y
	iny
	lda     (sp),y
	ldy     #$00
	sta     (sp),y
	lda     #$A0
	jsr     _insert_into_update_list
;
; game_level += 1;
;
	inc     _game_level
;
; if (game_level == LEVELS_ALL) game_level = 0;
;
	ldx     #$00
	lda     _game_level
	cmp     #$04
	bne     L1F2F
	txa
L2796:	sta     _game_level
;
; }
;
L1F2F:	jsr     incsp2
;
; while (1) {
;
	jmp     L278E

.endproc

; ---------------------------------------------------------------
; void __near__ show_select_weapon (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_select_weapon: near

.segment	"CODE"

;
; player_wpn[0] = WPN_ROLLER;
;
	jsr     decsp2
	lda     #$01
	sta     _player_wpn
;
; player_wpn[1] = WPN_ROLLER;
;
	sta     _player_wpn+1
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palEndgame);
;
	lda     #<(_palEndgame)
	ldx     #>(_palEndgame)
	jsr     _pal_bg
;
; pal_spr(palCharacters);
;
	lda     #<(_palCharacters)
	ldx     #>(_palCharacters)
	jsr     _pal_spr
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0xa0,1024-64);
;
	lda     #$A0
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_fill(0,64);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$40
	jsr     _vram_fill
;
; print_str(NAMETABLE_A+0x0E9,select_weapon);
;
	ldx     #$20
	lda     #$E9
	jsr     pushax
	lda     #<(_select_weapon)
	ldx     #>(_select_weapon)
	jsr     _print_str
;
; oam_clear();
;
	jsr     _oam_clear
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; anim_frame = 0;
;
	lda     #$00
	sta     _anim_frame
;
; ai_aggression[0]=1;
;
	lda     #$01
	sta     _ai_aggression
;
; ai_aggression[1]=1;
;
	sta     _ai_aggression+1
;
; player_ai[0]=0;
;
	lda     #$00
	sta     _player_ai
;
; player_ai[1]=1;
;
	lda     #$01
	sta     _player_ai+1
;
; player_mode[0]=MODE_SQUID;
;
	sta     _player_mode
;
; player_mode[1]=MODE_SQUID;
;
	sta     _player_mode+1
;
; if (player_wpn[0] == WPN_ROLLER) {
;
L27A1:	lda     _player_wpn
	cmp     #$01
	bne     L1F89
;
; oam_meta_spr(LEFT,  A_HEIGHT, 0<<4, SprPlayers[0][WPN_ROLLER][0][anim_frame]);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _SprPlayers+1
	sta     ptr1+1
	lda     _SprPlayers
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _anim_frame
	asl     a
	bcc     L279D
	inx
	clc
L279D:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; oam_meta_spr(RIGHT, A_HEIGHT, 1<<4, unselected_charger);
;
	jsr     decsp3
	lda     #$8C
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     #<(_unselected_charger)
	ldx     #>(_unselected_charger)
;
; } else {
;
	jmp     L279B
;
; oam_meta_spr(LEFT,  A_HEIGHT, 0<<4, unselected_roller);
;
L1F89:	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     #<(_unselected_roller)
	ldx     #>(_unselected_roller)
	jsr     _oam_meta_spr
;
; oam_meta_spr(RIGHT, A_HEIGHT, 1<<4, SprPlayers[0][WPN_CHARGER][0][anim_frame]);
;
	jsr     decsp3
	lda     #$8C
	ldy     #$02
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     #$10
	dey
	sta     (sp),y
	lda     _SprPlayers+1
	sta     ptr1+1
	lda     _SprPlayers
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _anim_frame
	asl     a
	bcc     L279E
	inx
	clc
L279E:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L279B:	jsr     _oam_meta_spr
;
; if (player_wpn[1] == WPN_ROLLER) {
;
	lda     _player_wpn+1
	cmp     #$01
	bne     L1FA9
;
; oam_meta_spr(LEFT,  B_HEIGHT, 2<<4, SprPlayers[1][WPN_ROLLER][0][anim_frame]);
;
	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     _SprPlayers+2+1
	sta     ptr1+1
	lda     _SprPlayers+2
	sta     ptr1
	ldy     #$03
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _anim_frame
	asl     a
	bcc     L279F
	inx
	clc
L279F:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; oam_meta_spr(RIGHT, B_HEIGHT, 3<<4, unselected_charger);
;
	jsr     decsp3
	lda     #$8C
	ldy     #$02
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     #<(_unselected_charger)
	ldx     #>(_unselected_charger)
;
; } else {
;
	jmp     L279C
;
; oam_meta_spr(LEFT,  B_HEIGHT, 2<<4, unselected_roller);
;
L1FA9:	jsr     decsp3
	lda     #$64
	ldy     #$02
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$20
	dey
	sta     (sp),y
	lda     #<(_unselected_roller)
	ldx     #>(_unselected_roller)
	jsr     _oam_meta_spr
;
; oam_meta_spr(RIGHT, B_HEIGHT, 3<<4, SprPlayers[1][WPN_CHARGER][0][anim_frame]);
;
	jsr     decsp3
	lda     #$8C
	ldy     #$02
	sta     (sp),y
	lda     #$78
	dey
	sta     (sp),y
	lda     #$30
	dey
	sta     (sp),y
	lda     _SprPlayers+2+1
	sta     ptr1+1
	lda     _SprPlayers+2
	sta     ptr1
	ldy     #$05
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _anim_frame
	asl     a
	bcc     L27A0
	inx
	clc
L27A0:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L279C:	jsr     _oam_meta_spr
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; anim_frame = 1 - anim_frame;
;
	lda     #$01
	sec
	sbc     _anim_frame
	sta     _anim_frame
;
; while (i < 10) {
;
	jmp     L27A9
;
; ppu_wait_frame();
;
L1FCD:	jsr     _ppu_wait_frame
;
; i++;
;
	inc     _i
;
; for (player_id = 0; player_id < 2; player_id++) {
;
	ldy     #$00
	tya
	sta     (sp),y
	iny
	sta     (sp),y
L1FD3:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	cmp     #$02
	txa
	sbc     #$00
	bvc     L1FDA
	eor     #$80
L1FDA:	jpl     L27A9
;
; j = pad_trigger(player_id);
;
	lda     (sp),y
	jsr     _pad_trigger
	sta     _j
;
; if((j!=0)&&(player_id==1)) player_ai[player_id]=0; //disable ai if player 2 presses any key at weapon select screen
;
	lda     _j
	beq     L27A6
	ldy     #$01
	lda     (sp),y
	bne     L27A6
	dey
	lda     (sp),y
	cmp     #$01
	bne     L27A6
	lda     #<(_player_ai)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_ai)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
;
; if (j & PAD_START) return;
;
L27A6:	lda     _j
	and     #$08
	beq     L27AB
;
; }
;
	jmp     incsp2
;
; if (j & PAD_UP) {
;
L27AB:	lda     _j
	and     #$10
	beq     L27A7
;
; if (player_wpn[player_id] == 1) {
;
	lda     #<(_player_wpn)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_wpn)
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	cmp     #$01
	bne     L1FEE
;
; player_wpn[player_id] = NUM_WPNS;
;
	lda     #<(_player_wpn)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_wpn)
	iny
	adc     (sp),y
	sta     ptr1+1
	lda     #$02
	dey
	sta     (ptr1),y
;
; } else {
;
	jmp     L27A1
;
; player_wpn[player_id] -= 1;
;
L1FEE:	lda     #<(_player_wpn)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_wpn)
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; goto next;
;
	jmp     L27A1
;
; if (j & PAD_SELECT || j & PAD_LEFT || j & PAD_RIGHT) {
;
L27A7:	lda     _j
	and     #$04
	bne     L27A8
	lda     _j
	and     #$40
	bne     L27A8
	lda     _j
	and     #$80
	beq     L1FD5
;
; player_wpn[player_id] += 1;
;
L27A8:	lda     #<(_player_wpn)
	ldy     #$00
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_wpn)
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if (player_wpn[player_id] > NUM_WPNS) player_wpn[player_id] = 1;
;
	lda     #<(_player_wpn)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_wpn)
	iny
	adc     (sp),y
	sta     ptr1+1
	dey
	lda     (ptr1),y
	cmp     #$03
	jcc     L27A1
	lda     #<(_player_wpn)
	clc
	adc     (sp),y
	sta     ptr1
	lda     #>(_player_wpn)
	iny
	adc     (sp),y
	sta     ptr1+1
	tya
	dey
	sta     (ptr1),y
;
; goto next;
;
	jmp     L27A1
;
; for (player_id = 0; player_id < 2; player_id++) {
;
L1FD5:	ldy     #$01
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	clc
	adc     #$01
	bcc     L1FDC
	inx
L1FDC:	jsr     stax0sp
	jmp     L1FD3
;
; while (i < 10) {
;
L27A9:	lda     _i
	cmp     #$0A
	jcc     L1FCD
;
; while (1) {
;
	jmp     L27A1

.endproc

; ---------------------------------------------------------------
; void __near__ show_credits (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_credits: near

.segment	"RODATA"

L2066:
	.word	$0000
L2084:
	.word	$0000
L2096:
	.word	$0000
L20B2:
	.word	$0000

.segment	"CODE"

;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_off();
;
	jsr     _ppu_off
;
; pal_bg(palEndgame);
;
	lda     #<(_palEndgame)
	ldx     #>(_palEndgame)
	jsr     _pal_bg
;
; i = 0;
;
	lda     #$00
	sta     _i
;
; j = 0;
;
	sta     _j
;
; divvar = 0;
;
	sta     _divvar
	sta     _divvar+1
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	jsr     _vram_adr
;
; vram_fill(0xa0,1024-64);
;
	lda     #$A0
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_fill(0,64);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$40
	jsr     _vram_fill
;
; sum = NAMETABLE_C;
;
	ldx     #$28
	lda     #$00
	sta     _sum
	stx     _sum+1
;
; while (i < 19) { /* 4 6 A C */
;
	jmp     L2020
;
; ppu_wait_nmi();
;
L201E:	jsr     _ppu_wait_nmi
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(sum);
;
	lda     _sum
	ldx     _sum+1
	jsr     _vram_adr
;
; vram_fill(0xa0,1024-64);
;
	lda     #$A0
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; vram_fill(0,64);
;
	lda     #$00
	jsr     pusha
	tax
	lda     #$40
	jsr     _vram_fill
;
; print_str(sum+0x126, credits[i]);
;
	lda     _sum
	ldx     _sum+1
	clc
	adc     #$26
	bcc     L202E
	inx
L202E:	inx
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L27AE
	inx
	clc
L27AE:	adc     #<(_credits)
	sta     ptr1
	txa
	adc     #>(_credits)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_str
;
; print_str(sum+0x166, credits[i+1]);
;
	lda     _sum
	ldx     _sum+1
	clc
	adc     #$66
	bcc     L2033
	inx
L2033:	inx
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$01
	bcc     L2036
	inx
L2036:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_credits)
	sta     ptr1
	lda     tmp1
	adc     #>(_credits)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_str
;
; print_str(sum+0x1C6, credits[i+2]);
;
	lda     _sum
	ldx     _sum+1
	clc
	adc     #$C6
	bcc     L2039
	inx
L2039:	inx
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$02
	bcc     L203C
	inx
L203C:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_credits)
	sta     ptr1
	lda     tmp1
	adc     #>(_credits)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_str
;
; print_str(sum+0x206, credits[i+3]);
;
	lda     _sum
	ldx     _sum+1
	clc
	adc     #$06
	bcc     L203F
	inx
L203F:	inx
	inx
	jsr     pushax
	ldx     #$00
	lda     _i
	clc
	adc     #$03
	bcc     L2042
	inx
L2042:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_credits)
	sta     ptr1
	lda     tmp1
	adc     #>(_credits)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _print_str
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; scroll(0,divvar);
;
L2044:	jsr     push0
	lda     _divvar
	ldx     _divvar+1
	jsr     _scroll
;
; if (i == 0 && divvar < 0x62) {
;
	lda     _i
	bne     L204A
	lda     _divvar+1
	cmp     #$00
	bne     L204D
	lda     _divvar
	cmp     #$62
L204D:	bcs     L204A
;
; oam_meta_spr(0x70,0x48-divvar,0,(char*)i16);
;
	jsr     decsp3
	lda     #$70
	ldy     #$02
	sta     (sp),y
	lda     #$48
	sec
	sbc     _divvar
	pha
	lda     #$00
	sbc     _divvar+1
	pla
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _i16
	ldx     _i16+1
	jsr     _oam_meta_spr
;
; divvar++;
;
L204A:	lda     _divvar
	ldx     _divvar+1
	clc
	adc     #$01
	bcc     L2055
	inx
L2055:	sta     _divvar
	stx     _divvar+1
;
; WAIT_WITH_SKIP(1);
;
	lda     #$01
	sta     _wait
L27B1:	lda     _wait
	beq     L2059
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L27B1
	jmp     L209F
;
; } while (divvar % 240);
;
L2059:	lda     _divvar
	ldx     _divvar+1
	jsr     pushax
	lda     #$F0
	jsr     tosumoda0
	stx     tmp1
	ora     tmp1
	jne     L2044
;
; if (divvar == 480) divvar = 0;
;
	lda     _divvar+1
	cmp     #$01
	bne     L2068
	lda     _divvar
	cmp     #$E0
	bne     L2068
	lda     #$00
	sta     _divvar
	sta     _divvar+1
;
; if (sum == NAMETABLE_A) sum = NAMETABLE_C;
;
L2068:	lda     _sum+1
	cmp     #$20
	bne     L206D
	lda     _sum
	bne     L206D
	ldx     #$28
;
; else sum = NAMETABLE_A;
;
	jmp     L27B8
L206D:	ldx     #$20
	lda     #$00
L27B8:	sta     _sum
	stx     _sum+1
;
; WAIT_WITH_SKIP(50);
;
	lda     #$32
	sta     _wait
L27B2:	lda     _wait
	beq     L27B3
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L27B2
	jmp     L209F
;
; i+=4;
;
L27B3:	lda     #$04
	clc
	adc     _i
	sta     _i
;
; while (i < 19) { /* 4 6 A C */
;
L2020:	lda     _i
	cmp     #$13
	jcc     L201E
;
; WAIT_WITH_SKIP(100);
;
	lda     #$64
	sta     _wait
L27B4:	lda     _wait
	beq     L208A
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L27B4
	jmp     L209F
;
; ppu_off();
;
L208A:	jsr     _ppu_off
;
; vram_adr(sum);
;
	lda     _sum
	ldx     _sum+1
	jsr     _vram_adr
;
; vram_fill(0xa0,1024-64);
;
	lda     #$A0
	jsr     pusha
	ldx     #$03
	lda     #$C0
	jsr     _vram_fill
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; while (divvar % 240 < 100) {
;
	jmp     L20A0
;
; WAIT_WITH_SKIP(1);
;
L209E:	lda     #$01
	sta     _wait
L27B5:	lda     _wait
	beq     L27B7
	dec     _wait
	jsr     _ppu_wait_frame
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L27B5
	jmp     L209F
;
; scroll(0,divvar);
;
L27B7:	jsr     push0
	lda     _divvar
	ldx     _divvar+1
	jsr     _scroll
;
; divvar++;
;
	lda     _divvar
	ldx     _divvar+1
	clc
	adc     #$01
	bcc     L20B7
	inx
L20B7:	sta     _divvar
	stx     _divvar+1
;
; while (divvar % 240 < 100) {
;
L20A0:	lda     _divvar
	ldx     _divvar+1
	jsr     pushax
	lda     #$F0
	jsr     tosumoda0
	cpx     #$00
	bne     L20A2
	cmp     #$64
L20A2:	bcc     L209E
;
; delay(20);
;
L209F:	lda     #$14
	jmp     _delay

.endproc

; ---------------------------------------------------------------
; void __near__ show_endgame (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_show_endgame: near

.segment	"CODE"

;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; ppu_off();
;
	jsr     _ppu_off
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(endgame,1024);
;
	lda     #<(_endgame)
	ldx     #>(_endgame)
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; pal_bg(palEndgame);
;
	lda     #<(_palEndgame)
	ldx     #>(_palEndgame)
	jsr     _pal_bg
;
; pal_spr(palJudd);
;
	lda     #<(_palJudd)
	ldx     #>(_palJudd)
	jsr     _pal_spr
;
; oam_clear();
;
	jsr     _oam_clear
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; if (player_score[0] == 0) player_score[0] = 1;
;
	lda     _player_score
	ora     _player_score+1
	bne     L20CC
	sta     _player_score+1
	lda     #$01
	sta     _player_score
;
; if (player_score[1] == 0) player_score[1] = 1;
;
L20CC:	lda     _player_score+2
	ora     _player_score+2+1
	bne     L20D3
	sta     _player_score+2+1
	lda     #$01
	sta     _player_score+2
;
; sum = (player_score[0] + player_score[1]);
;
L20D3:	lda     _player_score
	clc
	adc     _player_score+2
	sta     _sum
	lda     _player_score+1
	adc     _player_score+2+1
	sta     _sum+1
;
; divvar = player_score[0] * 100;
;
	lda     _player_score
	ldx     _player_score+1
	jsr     pushax
	lda     #$64
	jsr     tosumula0
	sta     _divvar
	stx     _divvar+1
;
; divvar /= sum;
;
	jsr     pushax
	lda     _sum
	ldx     _sum+1
	jsr     tosudivax
	sta     _divvar
	stx     _divvar+1
;
; if (divvar == 100) divvar = 99;
;
	cpx     #$00
	bne     L20E4
	cmp     #$64
	bne     L20E4
	lda     #$63
	sta     _divvar
	stx     _divvar+1
;
; if (divvar == 0) divvar = 1;
;
L20E4:	lda     _divvar
	ora     _divvar+1
	bne     L20E9
	sta     _divvar+1
	lda     #$01
	sta     _divvar
;
; put_num(NAMETABLE_A+0x1EA,divvar,2);
;
L20E9:	jsr     decsp4
	lda     #$EA
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     _divvar
	ldy     #$00
	sta     (sp),y
	iny
	lda     _divvar+1
	sta     (sp),y
	lda     #$02
	jsr     _put_num
;
; divvar = 100 - divvar;
;
	lda     #$64
	sec
	sbc     _divvar
	sta     _divvar
	lda     #$00
	sbc     _divvar+1
	sta     _divvar+1
;
; put_num(NAMETABLE_A+0x1F4,divvar,2);
;
	jsr     decsp4
	lda     #$F4
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$21
	sta     (sp),y
	lda     _divvar
	ldy     #$00
	sta     (sp),y
	iny
	lda     _divvar+1
	sta     (sp),y
	lda     #$02
	jsr     _put_num
;
; divvar *= 9;
;
	lda     _divvar
	ldx     _divvar+1
	jsr     mulax9
	sta     _divvar
	stx     _divvar+1
;
; divvar /= 100;
;
	jsr     pushax
	lda     #$64
	jsr     tosudiva0
	sta     _divvar
	stx     _divvar+1
;
; if (player_score[0] > player_score[1]) {
;
	lda     _player_score
	sec
	sbc     _player_score+2
	sta     tmp1
	lda     _player_score+1
	sbc     _player_score+2+1
	ora     tmp1
	bcc     L20FC
	beq     L20FC
;
; print_str(NAMETABLE_A+0x1C9,victoryMsg);
;
	ldx     #$21
	lda     #$C9
	jsr     pushax
	lda     #<(_victoryMsg)
	ldx     #>(_victoryMsg)
	jsr     _print_str
;
; i16 = (int)judd_left;
;
	lda     #>(_judd_left)
	sta     _i16+1
	lda     #<(_judd_left)
;
; } else if (player_score[0] == player_score[1]) {
;
	jmp     L27BA
L20FC:	lda     _player_score+2
	ldx     _player_score+2+1
	cpx     _player_score+1
	bne     L2106
	cmp     _player_score
	bne     L2106
;
; print_str(NAMETABLE_A+0x1CB,tieMsg);
;
	ldx     #$21
	lda     #$CB
	jsr     pushax
	lda     #<(_tieMsg)
	ldx     #>(_tieMsg)
	jsr     _print_str
;
; i16 = (int)judd_tie;
;
	lda     #>(_judd_tie)
	sta     _i16+1
	lda     #<(_judd_tie)
;
; } else {
;
	jmp     L27BA
;
; print_str(NAMETABLE_A+0x1CF,victoryMsg);
;
L2106:	ldx     #$21
	lda     #$CF
	jsr     pushax
	lda     #<(_victoryMsg)
	ldx     #>(_victoryMsg)
	jsr     _print_str
;
; i16 = (int)judd_right;
;
	lda     #>(_judd_right)
	sta     _i16+1
	lda     #<(_judd_right)
L27BA:	sta     _i16
;
; oam_meta_spr(0x70,0x48,0,(char*)i16);
;
	jsr     decsp3
	lda     #$70
	ldy     #$02
	sta     (sp),y
	lda     #$48
	dey
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	lda     _i16
	ldx     _i16+1
	jsr     _oam_meta_spr
;
; put_num(NAMETABLE_A+0x24A,player_score[0],3);
;
	jsr     decsp4
	lda     #$4A
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     _player_score
	ldy     #$00
	sta     (sp),y
	iny
	lda     _player_score+1
	sta     (sp),y
	lda     #$03
	jsr     _put_num
;
; put_num(NAMETABLE_A+0x253,player_score[1],3);
;
	jsr     decsp4
	lda     #$53
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$22
	sta     (sp),y
	lda     _player_score+2
	ldy     #$00
	sta     (sp),y
	iny
	lda     _player_score+2+1
	sta     (sp),y
	lda     #$03
	jsr     _put_num
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; music_play(MUSIC_WELL_DONE);
;
	lda     #$04
	jsr     _music_play
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; for (i = 4; i < 12 - divvar; ++i) {
;
	lda     #$04
	sta     _i
L27BB:	lda     _i
	jsr     pusha0
	lda     #$0C
	sec
	sbc     _divvar
	pha
	txa
	sbc     _divvar+1
	tax
	pla
	jsr     tosicmp
	bcs     L2129
;
; set_tile_palette(i,8,1);
;
	jsr     decsp2
	lda     _i
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$01
	jsr     _set_tile_palette
;
; for (i = 4; i < 12 - divvar; ++i) {
;
	inc     _i
	jmp     L27BB
;
; for (i = 12 - divvar; i <= 11; ++i) {
;
L2129:	lda     #$0C
	sec
	sbc     _divvar
	sta     _i
	lda     #$00
	sbc     _divvar+1
L27BC:	lda     _i
	cmp     #$0C
	bcs     L2135
;
; set_tile_palette(i,8,2);
;
	jsr     decsp2
	lda     _i
	ldy     #$01
	sta     (sp),y
	lda     #$08
	dey
	sta     (sp),y
	lda     #$02
	jsr     _set_tile_palette
;
; for (i = 12 - divvar; i <= 11; ++i) {
;
	inc     _i
	jmp     L27BC
;
; set_vram_update(update_list);
;
L2135:	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_wait_frame();
;
L2142:	jsr     _ppu_wait_frame
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; if ((pad_trigger(0) | pad_trigger(1)) & PAD_START) break;
;
	lda     #$00
	jsr     _pad_trigger
	jsr     pushax
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	and     #$08
	beq     L2142
	jmp     _reset_palette_state

.endproc

; ---------------------------------------------------------------
; void __near__ projectile_move (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_projectile_move: near

.segment	"CODE"

;
; void projectile_move(unsigned char id) {
;
	jsr     pusha
;
; unsigned char map_type = 0;
;
	lda     #$00
	jsr     pusha
;
; unsigned char dir = projectile_dir[id];
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _projectile_dir,y
	jsr     pusha
;
; projectile_cnt[id]=0;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L27C4
	inx
	clc
L27C4:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; projectile_dist[id]-=1;
;
	lda     #<(_projectile_dist)
	ldx     #>(_projectile_dist)
	iny
	clc
	adc     (sp),y
	bcc     L2158
	inx
L2158:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (projectile_dist[id] == 0) {
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     _projectile_dist,y
	bne     L215A
;
; projectile_dir[id]=DIR_NONE;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$00
	sta     _projectile_dir,y
;
; return;
;
	jmp     incsp3
;
; px=projectile_x[id]>>(TILE_SIZE_BIT+FP_BITS);
;
L215A:	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L27C5
	inx
	clc
L27C5:	adc     #<(_projectile_x)
	sta     ptr1
	txa
	adc     #>(_projectile_x)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _px
;
; py=projectile_y[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L27C6
	inx
	clc
L27C6:	adc     #<(_projectile_y)
	sta     ptr1
	txa
	adc     #>(_projectile_y)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _py
	dey
;
; switch (dir) {
;
	lda     (sp),y
;
; }
;
	bne     L27DB
;
; }
;
	jmp     incsp3
;
; }
;
L27DB:	cmp     #$10
	beq     L27CA
	cmp     #$20
	beq     L27CB
	cmp     #$40
	beq     L27C8
	cmp     #$80
	beq     L27C9
	jmp     L27CC
;
; case DIR_LEFT:   --px; break;
;
L27C8:	dec     _px
	jmp     L27CC
;
; case DIR_RIGHT:  ++px; break;
;
L27C9:	inc     _px
	jmp     L27CC
;
; case DIR_UP:     --py; break;
;
L27CA:	dec     _py
	jmp     L27CC
;
; case DIR_DOWN:   ++py; break;
;
L27CB:	inc     _py
;
; if (px > MAP_WDT-1) {
;
L27CC:	lda     _px
	cmp     #$10
	bcc     L27CD
;
; projectile_dir[id]=DIR_NONE;
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     #$00
	sta     _projectile_dir,y
;
; return;
;
	jmp     incsp3
;
; if (py > MAP_HGT-1) {
;
L27CD:	lda     _py
	cmp     #$0F
	ldx     #$00
	bcc     L27CE
;
; projectile_dir[id]=DIR_NONE;
;
	ldy     #$02
	lda     (sp),y
	tay
	txa
	sta     _projectile_dir,y
;
; return;
;
	jmp     incsp3
;
; map_type = map[MAP_ADR(px, py)];
;
L27CE:	lda     _py
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldy     #$01
	sta     (sp),y
;
; if (can_ink(map_type)) {
;
	jsr     _can_ink
	tax
	beq     L218F
;
; set_tile_palette(px, py, id+1);
;
	jsr     decsp2
	lda     _px
	ldy     #$01
	sta     (sp),y
	lda     _py
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	jsr     _set_tile_palette
;
; if ((map_type >= 0x22 && map_type <= 0x29) || (map_type >= 0x32 && map_type <= 0x39)) {
;
L218F:	ldy     #$01
	lda     (sp),y
	cmp     #$22
	bcc     L27D3
	cmp     #$2A
	bcc     L27DA
L27D3:	lda     (sp),y
	cmp     #$32
	bcc     L2197
	cmp     #$3A
	bcs     L2197
;
; projectile_dir[id]=DIR_NONE;
;
L27DA:	iny
	lda     (sp),y
	tay
	lda     #$00
	sta     _projectile_dir,y
;
; return;
;
	jmp     incsp3
;
; projectile_cnt[id]=TILE_SIZE<<FP_BITS;
;
L2197:	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L27C7
	inx
	clc
L27C7:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	tya
	sta     (ptr1),y
;
; }
;
	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; unsigned int __near__ player_dist (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_dist: near

.segment	"CODE"

;
; unsigned int player_dist(unsigned char id1, unsigned char id2){
;
	jsr     pusha
;
; int px2=player_x[id1]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L27E0
	inx
	clc
L27E0:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	jsr     pusha0
;
; int py2=player_y[id1]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$03
	lda     (sp),y
	asl     a
	bcc     L27E1
	ldx     #$01
	clc
L27E1:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
;
; int px=player_x[id2]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$04
	lda     (sp),y
	asl     a
	bcc     L27E2
	ldx     #$01
	clc
L27E2:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
;
; int py=player_y[id2]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$06
	lda     (sp),y
	asl     a
	bcc     L27E3
	ldx     #$01
	clc
L27E3:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	jsr     pusha0
;
; return abs(px2-px)+abs(py2-py);
;
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$02
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _abs
	jsr     pushax
	ldy     #$07
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sec
	ldy     #$02
	sbc     (sp),y
	pha
	txa
	iny
	sbc     (sp),y
	tax
	pla
	jsr     _abs
	jsr     tosaddax
;
; }
;
	ldy     #$0A
	jmp     addysp

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ player_move_test (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move_test: near

.segment	"CODE"

;
; unsigned char player_move_test(unsigned char id,unsigned char dir_index) {
;
	jsr     pusha
;
; unsigned char map_type = 0;
;
	lda     #$00
	jsr     pusha
;
; unsigned char is_wall=0;
;
	jsr     decsp1
	jsr     pusha
;
; px=player_x[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$04
	tax
	lda     (sp),y
	asl     a
	bcc     L27EB
	inx
	clc
L27EB:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _px
;
; py=player_y[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$04
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L27EC
	inx
	clc
L27EC:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _py
;
; switch (dir_index%4) {
;
	ldy     #$03
	lda     (sp),y
	and     #$03
;
; }
;
	beq     L27ED
	cmp     #$01
	beq     L27EF
	cmp     #$02
	beq     L27EE
	cmp     #$03
	beq     L27F0
	jmp     L27F1
;
; case 0:  --px; break;
;
L27ED:	dec     _px
	jmp     L27F1
;
; case 2: ++px; break;
;
L27EE:	inc     _px
	jmp     L27F1
;
; case 1:    --py; break;
;
L27EF:	dec     _py
	jmp     L27F1
;
; case 3:  ++py; break;
;
L27F0:	inc     _py
;
; if (px > MAP_WDT-1) {
;
L27F1:	lda     _px
	cmp     #$10
	lda     #$00
	bcc     L27F2
;
; return 0;
;
	tax
	jmp     incsp5
;
; if (py > MAP_HGT-1) {
;
L27F2:	lda     _py
	cmp     #$0F
	lda     #$00
	tax
;
; return 0;
;
	jcs     incsp5
;
; map_type = map[MAP_ADR(px, py)];
;
	lda     _py
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldy     #$02
	sta     (sp),y
;
; if((map_type == 0x2c || map_type == 0x2d || map_type == 0x3c || map_type == 0x3d) && player_mode[id] != MODE_SQUID) return 0;
;
	cmp     #$2C
	beq     L27F4
	lda     (sp),y
	cmp     #$2D
	beq     L27F4
	cmp     #$3C
	beq     L27F4
	cmp     #$3D
	bne     L2807
L27F4:	ldy     #$04
	lda     (sp),y
	tay
	lda     _player_mode,y
	cmp     #$01
	beq     L21DF
	ldx     #$00
	jmp     L27EA
;
; if((map_type >= 0x22 && map_type <= 0x29) || (map_type >= 0x32 && map_type <= 0x39)) is_wall=1;
;
L21DF:	ldy     #$02
L2807:	lda     (sp),y
	cmp     #$22
	bcc     L27FC
	cmp     #$2A
	bcc     L2808
L27FC:	lda     (sp),y
	cmp     #$32
	bcc     L2806
	cmp     #$3A
	bcs     L2806
L2808:	lda     #$01
	ldy     #$00
	sta     (sp),y
;
; if(can_ink(map_type)){
;
	ldy     #$02
L2806:	lda     (sp),y
	jsr     _can_ink
	tax
	beq     L21B7
;
; tile_palette=get_tile_palette(px,py);
;
	lda     _px
	jsr     pusha
	lda     _py
	jsr     _get_tile_palette
	ldy     #$01
	sta     (sp),y
;
; if(tile_palette==id+1) return 1-is_wall; //already inked
;
	ldx     #$00
	lda     (sp),y
	sta     ptr1
	stx     ptr1+1
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	bcc     L21FC
	inx
L21FC:	cpx     ptr1+1
	bne     L21FA
	cmp     ptr1
	bne     L21FA
	ldx     #$00
	lda     #$01
	sec
	ldy     #$00
	sbc     (sp),y
	jmp     incsp5
;
; if(tile_palette==2-id) return 4; //enemy ink
;
L21FA:	ldy     #$01
	lda     (sp),y
	jsr     pusha0
	lda     #$02
	sec
	ldy     #$06
	sbc     (sp),y
	jsr     tosicmp0
	bne     L21FE
	ldx     #$00
	lda     #$04
	jmp     incsp5
;
; else return 3-is_wall; //uninked
;
L21FE:	ldx     #$00
	lda     #$03
	sec
	ldy     #$00
	sbc     (sp),y
	jmp     incsp5
;
; return 0;
;
L27EA:	txa
;
; }
;
L21B7:	jmp     incsp5

.endproc

; ---------------------------------------------------------------
; void __near__ player_move (unsigned char, unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_move: near

.segment	"CODE"

;
; void player_move(unsigned char id,unsigned char dir_index) {
;
	jsr     pusha
;
; unsigned char map_type = 0;
;
	lda     #$00
	jsr     pusha
;
; if (player_cooldown[id]) {
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     _player_cooldown,y
;
; return;
;
	beq     L282D
;
; }
;
	jmp     incsp3
;
; player_dir_index[id]=dir_index;
;
L282D:	ldy     #$02
	lda     (sp),y
	tax
	dey
	lda     (sp),y
	sta     _player_dir_index,x
;
; player_dir[id]=dirs[dir_index];
;
	lda     #<(_player_dir)
	ldx     #>(_player_dir)
	iny
	clc
	adc     (sp),y
	bcc     L2210
	inx
L2210:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tay
	lda     _dirs,y
	ldy     #$00
	jsr     staspidx
;
; player_anim_cnt[id] += 1;
;
	lda     #<(_player_anim_cnt)
	ldx     #>(_player_anim_cnt)
	ldy     #$02
	clc
	adc     (sp),y
	bcc     L2216
	inx
L2216:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; player_cnt[id]=0;
;
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2811
	inx
	clc
L2811:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; px=player_x[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	iny
	tax
	lda     (sp),y
	asl     a
	bcc     L2812
	inx
	clc
L2812:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _px
;
; py=player_y[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2813
	inx
	clc
L2813:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	sta     _py
;
; switch (dir_index) {
;
	lda     (sp),y
;
; }
;
	beq     L2815
	cmp     #$01
	beq     L2817
	cmp     #$02
	beq     L2816
	cmp     #$03
	beq     L2818
	jmp     L2819
;
; case 0:  --px; break;
;
L2815:	dec     _px
	jmp     L2819
;
; case 2: ++px; break;
;
L2816:	inc     _px
	jmp     L2819
;
; case 1:    --py; break;
;
L2817:	dec     _py
	jmp     L2819
;
; case 3:  ++py; break;
;
L2818:	inc     _py
;
; if (px > MAP_WDT-1) {
;
L2819:	lda     _px
	cmp     #$10
;
; return;
;
	bcc     L282E
;
; }
;
	jmp     incsp3
;
; if (py > MAP_HGT-1) {
;
L282E:	lda     _py
	cmp     #$0F
;
; return;
;
	bcc     L282F
;
; }
;
	jmp     incsp3
;
; map_type = map[MAP_ADR(px, py)];
;
L282F:	ldx     #$00
	lda     _py
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
;
; if (player_mode[id]==MODE_NORMAL && player_wpn[id] == WPN_ROLLER && can_ink(map_type)) {
;
	ldy     #$02
	lda     (sp),y
	tay
	lda     _player_mode,y
	bne     L223E
	ldy     #$02
	lda     (sp),y
	tay
	lda     _player_wpn,y
	cmp     #$01
	bne     L223E
	ldy     #$00
	lda     (sp),y
	jsr     _can_ink
	tax
	beq     L223E
;
; set_tile_palette(px, py, id+1);
;
	jsr     decsp2
	lda     _px
	ldy     #$01
	sta     (sp),y
	lda     _py
	dey
	sta     (sp),y
	ldy     #$04
	lda     (sp),y
	clc
	adc     #$01
	jsr     _set_tile_palette
;
; if (((map_type >= 0x22 && map_type <= 0x29) || (map_type >= 0x32 && map_type <= 0x39)) && (player_mode[id]!=MODE_SQUID || get_tile_palette(px,py)!=id+1)) {
;
L223E:	ldy     #$00
	lda     (sp),y
	cmp     #$22
	bcc     L281F
	cmp     #$2A
	bcc     L2826
L281F:	lda     (sp),y
	cmp     #$32
	bcc     L224C
	cmp     #$3A
	bcs     L224C
L2826:	ldy     #$02
	lda     (sp),y
	tay
	lda     _player_mode,y
	cmp     #$01
	bne     L282B
	lda     _px
	jsr     pusha
	lda     _py
	jsr     _get_tile_palette
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	ldy     #$02
	lda     (sp),y
	clc
	adc     #$01
	bcc     L225C
	inx
L225C:	cpx     ptr1+1
	bne     L2204
	cmp     ptr1
	beq     L282C
;
; return;
;
L282B:	jmp     incsp3
;
; player_cnt[id]=TILE_SIZE<<FP_BITS;
;
L224C:	ldy     #$02
L282C:	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2814
	inx
	clc
L2814:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	tya
	sta     (ptr1),y
;
; player_diag_flip[id]=1;
;
	iny
	lda     (sp),y
	tay
	lda     #$01
	sta     _player_diag_flip,y
;
; sfx_play_damped(SFX_SPLAT,0,(player_dist(0,1)>>1)); //positional audio for maximum player distance of 31
;
	jsr     decsp2
	lda     #$01
	tay
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
	jsr     pusha
	lda     #$01
	jsr     _player_dist
	jsr     shrax1
	jsr     _sfx_play_damped
;
; }
;
L2204:	jmp     incsp3

.endproc

; ---------------------------------------------------------------
; void __near__ player_make_projectile (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_make_projectile: near

.segment	"CODE"

;
; void player_make_projectile(unsigned char id) {
;
	jsr     pusha
;
; unsigned char map_type = 0;
;
	lda     #$00
	jsr     pusha
;
; if (player_cooldown[id]) return;
;
	ldy     #$01
	lda     (sp),y
	tay
	lda     _player_cooldown,y
	beq     L283E
;
; }
;
	jmp     incsp2
;
; if (player_wpn[id] == WPN_CHARGER && player_charge[id] < CHARGE_FRAMES) {
;
L283E:	ldy     #$01
	lda     (sp),y
	tay
	lda     _player_wpn,y
	cmp     #$02
	bne     L2273
	ldy     #$01
	lda     (sp),y
	tay
	lda     _player_charge,y
	cmp     #$10
	bcs     L2273
;
; ++player_charge[id];
;
	lda     #<(_player_charge)
	ldx     #>(_player_charge)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L227D
	inx
L227D:	sta     ptr1
	stx     ptr1+1
	dey
	lda     #$01
	clc
	adc     (ptr1),y
	sta     (ptr1),y
;
; return;
;
	jmp     incsp2
;
; projectile_dist[id] = weapon_ranges[player_wpn[id]];
;
L2273:	lda     #<(_projectile_dist)
	ldx     #>(_projectile_dist)
	ldy     #$01
	clc
	adc     (sp),y
	bcc     L2280
	inx
L2280:	sta     sreg
	stx     sreg+1
	lda     (sp),y
	tay
	lda     _player_wpn,y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_weapon_ranges)
	sta     ptr1+1
	ldy     #<(_weapon_ranges)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; projectile_dir[id] = player_dir[id];
;
	lda     #<(_projectile_dir)
	ldx     #>(_projectile_dir)
	iny
	clc
	adc     (sp),y
	bcc     L2287
	inx
L2287:	jsr     pushax
	ldy     #$03
	lda     (sp),y
	tay
	lda     _player_dir,y
	ldy     #$00
	jsr     staspidx
;
; projectile_x[id] = player_x[id];
;
	ldy     #$01
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2836
	inx
	clc
L2836:	adc     #<(_projectile_x)
	tay
	txa
	adc     #>(_projectile_x)
	tax
	tya
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2837
	inx
	clc
L2837:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; projectile_y[id] = player_y[id];
;
	iny
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2838
	inx
	clc
L2838:	adc     #<(_projectile_y)
	tay
	txa
	adc     #>(_projectile_y)
	tax
	tya
	jsr     pushax
	ldy     #$03
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2839
	inx
	clc
L2839:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; player_cooldown[id] = weapon_cooldown[player_wpn[id]];
;
	lda     #<(_player_cooldown)
	ldx     #>(_player_cooldown)
	iny
	clc
	adc     (sp),y
	bcc     L2295
	inx
L2295:	sta     sreg
	stx     sreg+1
	lda     (sp),y
	tay
	lda     _player_wpn,y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_weapon_cooldown)
	sta     ptr1+1
	ldy     #<(_weapon_cooldown)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
;
; player_charge[id] = 0;
;
	iny
	lda     (sp),y
	tay
	lda     #$00
	sta     _player_charge,y
;
; px=projectile_x[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$01
	tax
	lda     (sp),y
	asl     a
	bcc     L283A
	inx
	clc
L283A:	adc     #<(_projectile_x)
	sta     ptr1
	txa
	adc     #>(_projectile_x)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _px
;
; py=projectile_y[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L283B
	inx
	clc
L283B:	adc     #<(_projectile_y)
	sta     ptr1
	txa
	adc     #>(_projectile_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _py
;
; map_type = map[MAP_ADR(px, py)];
;
	ldx     #$00
	lda     _py
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
;
; if (can_ink(map_type)) {
;
	jsr     _can_ink
	tax
	beq     L22AE
;
; set_tile_palette(px, py, id+1);
;
	jsr     decsp2
	lda     _px
	ldy     #$01
	sta     (sp),y
	lda     _py
	dey
	sta     (sp),y
	ldy     #$03
	lda     (sp),y
	clc
	adc     #$01
	jsr     _set_tile_palette
;
; }
;
L22AE:	jmp     incsp2

.endproc

; ---------------------------------------------------------------
; void __near__ player_die (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_player_die: near

.segment	"CODE"

;
; void player_die(unsigned char id) {
;
	jsr     pusha
;
; player_x[id] = player_x_spawn[id];
;
	ldx     #$00
	lda     (sp,x)
	asl     a
	bcc     L2844
	inx
	clc
L2844:	adc     #<(_player_x)
	tay
	txa
	adc     #>(_player_x)
	tax
	tya
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2845
	inx
	clc
L2845:	adc     #<(_player_x_spawn)
	sta     ptr1
	txa
	adc     #>(_player_x_spawn)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; player_y[id] = player_y_spawn[id];
;
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2846
	inx
	clc
L2846:	adc     #<(_player_y)
	tay
	txa
	adc     #>(_player_y)
	tax
	tya
	jsr     pushax
	ldy     #$02
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2847
	inx
	clc
L2847:	adc     #<(_player_y_spawn)
	sta     ptr1
	txa
	adc     #>(_player_y_spawn)
	sta     ptr1+1
	dey
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; player_cnt[id]=0;
;
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2848
	inx
	clc
L2848:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	tya
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; player_anim_cnt[id]=0;
;
	dey
	lda     (sp),y
	tay
	lda     #$00
	sta     _player_anim_cnt,y
;
; player_diag_flip[id]=0;
;
	tay
	lda     (sp),y
	tay
	lda     #$00
	sta     _player_diag_flip,y
;
; player_dir[id] = DIR_NONE;
;
	tay
	lda     (sp),y
	tay
	lda     #$00
	sta     _player_dir,y
;
; player_mode[id]=MODE_SQUID;
;
	tay
	lda     (sp),y
	tay
	lda     #$01
	sta     _player_mode,y
;
; player_wait[id] = RESPAWN_TIME;
;
	ldy     #$00
	lda     (sp),y
	tay
	lda     #$40
	sta     _player_wait,y
;
; sfx_play(SFX_DEATH,0);
;
	lda     #$03
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; unsigned char __near__ ai_move (unsigned char)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_ai_move: near

.segment	"CODE"

;
; unsigned char ai_move(unsigned char id){
;
	jsr     pusha
;
; if(player_dir[id]==DIR_NONE) j=rand8()%4; //random start direction
;
	jsr     decsp5
	ldy     #$05
	lda     (sp),y
	tay
	lda     _player_dir,y
	bne     L22DA
	jsr     _rand8
	and     #$03
;
; else j=player_dir_index[id]; //prefer movements in the same direction
;
	jmp     L2851
L22DA:	ldy     #$05
	lda     (sp),y
	tay
	lda     _player_dir_index,y
L2851:	sta     _j
;
; diri=255; dirv=0;
;
	lda     #$FF
	ldy     #$04
	sta     (sp),y
	lda     #$00
	dey
	sta     (sp),y
;
; for(k=0;k<4;k++){
;
	sta     _k
L2857:	lda     _k
	cmp     #$04
	bcs     L22EA
;
; dirtest=player_move_test(id,j+k);
;
	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     _j
	clc
	adc     _k
	jsr     _player_move_test
	ldy     #$02
	sta     (sp),y
;
; if(dirtest>dirv){dirv=dirtest; diri=j+k; if(dirtest==4) break;}
;
	sec
	iny
	sbc     (sp),y
	bcc     L22F5
	beq     L22F5
	dey
	lda     (sp),y
	iny
	sta     (sp),y
	lda     _j
	clc
	adc     _k
	iny
	sta     (sp),y
	ldy     #$02
	lda     (sp),y
	cmp     #$04
	bne     L2859
	jmp     L22EA
;
; else if((dirtest==dirv)&&(dirv==1)&&(rand8()<8)){dirv=dirtest; diri=j+k;}
;
L22F5:	dey
	lda     (sp),y
	iny
	cmp     (sp),y
	bne     L2859
	lda     (sp),y
	cmp     #$01
	bne     L2859
	jsr     _rand8
	cmp     #$08
	bcs     L2859
	ldy     #$02
	lda     (sp),y
	iny
	sta     (sp),y
	lda     _j
	clc
	adc     _k
	iny
	sta     (sp),y
;
; for(k=0;k<4;k++){
;
L2859:	inc     _k
	jmp     L2857
;
; if(dirv==0) j=PAD_A; //if no movement is possible just fire weapon
;
L22EA:	ldy     #$03
	lda     (sp),y
	bne     L2309
	lda     #$01
;
; else j=dirs[diri%4];
;
	jmp     L2852
L2309:	iny
	lda     (sp),y
	and     #$03
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_dirs)
	sta     ptr1+1
	ldy     #<(_dirs)
	lda     (ptr1),y
L2852:	sta     _j
;
; if((player_cooldown[id]==0)&&(ai_aggression[id]>=1)&&(player_mode[1-id]!=MODE_SQUID)){
;
	ldy     #$05
	lda     (sp),y
	tay
	ldx     #$00
	lda     _player_cooldown,y
	jne     L2861
	ldy     #$05
	lda     (sp),y
	tay
	lda     _ai_aggression,y
	jeq     L2861
	lda     #$01
	sec
	ldy     #$05
	sbc     (sp),y
	sta     ptr1
	txa
	clc
	adc     #>(_player_mode)
	sta     ptr1+1
	ldy     #<(_player_mode)
	lda     (ptr1),y
	cmp     #$01
	jeq     L2861
;
; px=player_x[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$05
	lda     (sp),y
	asl     a
	bcc     L2855
	inx
	clc
L2855:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _px
;
; py=player_y[id]>>(TILE_SIZE_BIT+FP_BITS);
;
	ldy     #$05
	ldx     #$00
	lda     (sp),y
	asl     a
	bcc     L2856
	inx
	clc
L2856:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _py
;
; px2=player_x[1-id]>>(TILE_SIZE_BIT+FP_BITS);
;
	tya
	sec
	ldy     #$05
	sbc     (sp),y
	pha
	lda     #$00
	sta     tmp1
	pla
	asl     a
	rol     tmp1
	clc
	adc     #<(_player_x)
	sta     ptr1
	lda     tmp1
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     (sp),y
;
; py2=player_y[1-id]>>(TILE_SIZE_BIT+FP_BITS);
;
	tya
	sec
	ldy     #$05
	sbc     (sp),y
	pha
	lda     #$00
	sta     tmp1
	pla
	asl     a
	rol     tmp1
	clc
	adc     #<(_player_y)
	sta     ptr1
	lda     tmp1
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	txa
	sta     (sp),y
;
; if(px==px2){
;
	iny
	lda     (sp),y
	cmp     _px
	jne     L232D
;
; if(py>py2){
;
	ldx     #$00
	lda     _py
	sec
	dey
	sbc     (sp),y
	bcc     L285E
	beq     L285E
;
; if(py-py2<=3){
;
	lda     _py
	sec
	sbc     (sp),y
	cmp     #$04
	jcs     L2861
;
; if(player_dir[id]==DIR_UP){ j=PAD_A; }
;
	ldy     #$05
	lda     (sp),y
	tay
	lda     _player_dir,y
	cmp     #$10
	bne     L2334
	lda     #$01
;
; else if(player_move_test(id,1)>0){ j=dirs[1]; }
;
	jmp     L2854
L2334:	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$01
	jsr     _player_move_test
	cmp     #$00
	jeq     L2380
	lda     _dirs+1
;
; }}else if((py2-py<=3)&&(py2-py>0)){
;
	jmp     L2854
L285E:	lda     (sp),y
	sec
	sbc     _py
	cmp     #$04
	jcs     L2861
	lda     (sp),y
	sec
	sbc     _py
	pha
	pla
	jeq     L2861
;
; if(player_dir[id]==DIR_DOWN){ j=PAD_A; }
;
	ldy     #$05
	lda     (sp),y
	tay
	lda     _player_dir,y
	cmp     #$20
	bne     L234B
	lda     #$01
;
; else if(player_move_test(id,3)>0){ j=dirs[3]; }
;
	jmp     L2854
L234B:	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$03
	jsr     _player_move_test
	cmp     #$00
	jeq     L2380
	lda     _dirs+3
;
; }}else if(py==py2){
;
	jmp     L2854
L232D:	ldx     #$00
	lda     (sp,x)
	cmp     _py
	bne     L2861
;
; if(px>px2){
;
	lda     _px
	sec
	ldy     #$01
	sbc     (sp),y
	bcc     L2860
	beq     L2860
;
; if(px-px2<=3){
;
	lda     _px
	sec
	sbc     (sp),y
	cmp     #$04
	bcs     L2861
;
; if(player_dir[id]==DIR_LEFT){ j=PAD_A; }
;
	ldy     #$05
	lda     (sp),y
	tay
	lda     _player_dir,y
	cmp     #$40
	bne     L2361
	lda     #$01
;
; else if((player_move_test(id,0)>0)){ j=dirs[0]; }
;
	jmp     L2854
L2361:	ldy     #$05
	lda     (sp),y
	jsr     pusha
	txa
	jsr     _player_move_test
	cmp     #$00
	beq     L2380
	lda     _dirs
;
; }}else if((px2-px<=3)&&(px2-px>0)){
;
	jmp     L2854
L2860:	lda     (sp),y
	sec
	sbc     _px
	cmp     #$04
	bcs     L2861
	lda     (sp),y
	sec
	sbc     _px
	pha
	pla
	beq     L2861
;
; if(player_dir[id]==DIR_RIGHT){ j=PAD_A; }
;
	ldy     #$05
	lda     (sp),y
	tay
	lda     _player_dir,y
	cmp     #$80
	bne     L2379
	lda     #$01
;
; else if(player_move_test(id,2)>0){ j=dirs[2]; }
;
	jmp     L2854
L2379:	ldy     #$05
	lda     (sp),y
	jsr     pusha
	lda     #$02
	jsr     _player_move_test
	cmp     #$00
	beq     L2380
	lda     _dirs+2
L2854:	sta     _j
;
; return j;
;
L2380:	ldx     #$00
L2861:	lda     _j
;
; }
;
	jmp     incsp6

.endproc

; ---------------------------------------------------------------
; void __near__ game_loop (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_game_loop: near

.segment	"CODE"

;
; ppu_off();
;
	jsr     decsp1
	jsr     _ppu_off
;
; oam_clear();
;
	jsr     _oam_clear
;
; bank_bg(1);
;
	lda     #$01
	jsr     _bank_bg
;
; bank_spr(1);
;
	lda     #$01
	jsr     _bank_spr
;
; scroll(0,0);
;
	jsr     push0
	jsr     _scroll
;
; vram_adr(NAMETABLE_A);
;
	ldx     #$20
	lda     #$00
	jsr     _vram_adr
;
; vram_write(levelList[game_level*LEVEL_ENTRY],1024);
;
	ldx     #$00
	lda     _game_level
	jsr     shlax2
	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$04
	lda     #$00
	jsr     _vram_write
;
; vram_adr(NAMETABLE_A+0x3c0);
;
	ldx     #$23
	lda     #$C0
	jsr     _vram_adr
;
; vram_read(palette_state, sizeof(palette_state));
;
	lda     #<(_palette_state)
	ldx     #>(_palette_state)
	jsr     pushax
	ldx     #$00
	lda     #$40
	jsr     _vram_read
;
; vram_adr(NAMETABLE_C);
;
	ldx     #$28
	lda     #$00
	jsr     _vram_adr
;
; vram_fill(0,1024);
;
	lda     #$00
	jsr     pusha
	ldx     #$04
	jsr     _vram_fill
;
; pal_bright(4);
;
	lda     #$04
	jsr     _pal_bright
;
; pal_bg(levelList[game_level*LEVEL_ENTRY+1]);
;
	ldx     #$00
	lda     _game_level
	jsr     shlax2
	clc
	adc     #$01
	bcc     L23A8
	inx
L23A8:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; pal_spr(levelList[game_level*LEVEL_ENTRY+2]);
;
	ldx     #$00
	lda     _game_level
	jsr     shlax2
	clc
	adc     #$02
	bcc     L23AC
	inx
L23AC:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_spr
;
; player_all=0;
;
	lda     #$00
	sta     _player_all
;
; timer = TIMER_START;
;
	lda     #$3C
	sta     _timer
;
; i16=NAMETABLE_A;
;
	ldx     #$20
	lda     #$00
	sta     _i16
	stx     _i16+1
;
; ptr=0;
;
	sta     _ptr
;
; wait=0;
;
	sta     _wait
;
; vram_adr(NAMETABLE_A);
;
	jsr     _vram_adr
;
; for (i = 0; i < MAP_HGT; ++i) {
;
	lda     #$00
	sta     _i
L2907:	lda     _i
	cmp     #$0F
	jcs     L2909
;
; vram_adr(i16);
;
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; vram_read(nameRow,32);
;
	lda     #<(_nameRow)
	ldx     #>(_nameRow)
	jsr     pushax
	ldx     #$00
	lda     #$20
	jsr     _vram_read
;
; vram_adr(i16);
;
	lda     _i16
	ldx     _i16+1
	jsr     _vram_adr
;
; for (j = 0; j < (MAP_WDT << 1); j += 2) {
;
	lda     #$00
L28AE:	sta     _j
	cmp     #$20
	jcs     L23C9
;
; spr=nameRow[j];
;
	ldy     _j
	lda     _nameRow,y
	sta     _spr
;
; }
;
	cmp     #$10
	beq     L23DC
	cmp     #$11
	jne     L2908
;
; player_dir       [player_all] = DIR_NONE;
;
L23DC:	ldy     _player_all
	lda     #$00
	sta     _player_dir,y
;
; player_x_spawn   [player_all] = (j<<3)<<FP_BITS;
;
	tax
	lda     _player_all
	asl     a
	bcc     L28BB
	inx
	clc
L28BB:	adc     #<(_player_x_spawn)
	sta     ptr1
	txa
	adc     #>(_player_x_spawn)
	sta     ptr1+1
	ldx     #$00
	lda     _j
	jsr     aslax3
	jsr     aslax4
	ldy     #$00
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; player_y_spawn   [player_all] = (i<<4)<<FP_BITS;
;
	ldx     #$00
	lda     _player_all
	asl     a
	bcc     L28BC
	inx
	clc
L28BC:	adc     #<(_player_y_spawn)
	sta     ptr1
	txa
	adc     #>(_player_y_spawn)
	sta     ptr1+1
	ldx     #$00
	lda     _i
	jsr     aslax4
	jsr     aslax4
	dey
	sta     (ptr1),y
	iny
	txa
	sta     (ptr1),y
;
; player_cnt       [player_all] = 0;
;
	ldx     #$00
	lda     _player_all
	asl     a
	bcc     L28BD
	inx
	clc
L28BD:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; player_anim_cnt  [player_all] = 0;
;
	ldy     _player_all
	sta     _player_anim_cnt,y
;
; player_diag_flip [player_all] = 0;
;
	ldy     _player_all
	sta     _player_diag_flip,y
;
; player_wait      [player_all] = 16+((spr-TILE_PLAYERA)<<4);
;
	lda     #<(_player_wait)
	ldx     #>(_player_wait)
	clc
	adc     _player_all
	bcc     L23F6
	inx
L23F6:	sta     ptr1
	stx     ptr1+1
	lda     _spr
	sec
	sbc     #$10
	asl     a
	asl     a
	asl     a
	asl     a
	clc
	adc     #$10
	ldy     #$00
	sta     (ptr1),y
;
; player_cooldown  [player_all] = 0;
;
	ldy     _player_all
	lda     #$00
	sta     _player_cooldown,y
;
; player_speed     [player_all] = 2<<FP_BITS;
;
	tax
	lda     _player_all
	asl     a
	bcc     L28BE
	inx
	clc
L28BE:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	lda     #$20
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; player_charge    [player_all] = 0;
;
	ldy     _player_all
	sta     _player_charge,y
;
; projectile_cnt   [player_all] = 0;
;
	tax
	lda     _player_all
	asl     a
	bcc     L28BF
	inx
	clc
L28BF:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	lda     #$00
	tay
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; projectile_dir   [player_all] = DIR_NONE;
;
	ldy     _player_all
	sta     _projectile_dir,y
;
; ++player_all;
;
	inc     _player_all
;
; wait+=16;
;
	lda     #$10
	clc
	adc     _wait
	sta     _wait
;
; spr=0x2a;
;
	lda     #$2A
	sta     _spr
;
; map[ptr++]=spr;
;
L2908:	lda     _ptr
	inc     _ptr
	clc
	adc     #<(_map)
	sta     ptr1
	lda     #$00
	adc     #>(_map)
	sta     ptr1+1
	lda     _spr
	ldy     #$00
	sta     (ptr1),y
;
; vram_put(spr);
;
	lda     _spr
	jsr     _vram_put
;
; vram_put(nameRow[j+1]);
;
	ldx     #$00
	lda     _j
	clc
	adc     #$01
	bcc     L241B
	inx
L241B:	sta     ptr1
	txa
	clc
	adc     #>(_nameRow)
	sta     ptr1+1
	ldy     #<(_nameRow)
	lda     (ptr1),y
	jsr     _vram_put
;
; for (j = 0; j < (MAP_WDT << 1); j += 2) {
;
	lda     #$02
	clc
	adc     _j
	jmp     L28AE
;
; i16+=64;
;
L23C9:	lda     #$40
	clc
	adc     _i16
	sta     _i16
	bcc     L241E
	inc     _i16+1
;
; for (i = 0; i < MAP_HGT; ++i) {
;
L241E:	inc     _i
	jmp     L2907
;
; for (i = 0; i < player_all; ++i) {
;
L2909:	lda     #$00
	sta     _i
	tax
L290A:	lda     _i
	cmp     _player_all
	bcs     L2420
;
; player_x[i] = player_x_spawn[i];
;
	asl     a
	bcc     L28C0
	inx
	clc
L28C0:	adc     #<(_player_x)
	tay
	txa
	adc     #>(_player_x)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28C1
	inx
	clc
L28C1:	adc     #<(_player_x_spawn)
	sta     ptr1
	txa
	adc     #>(_player_x_spawn)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; player_y[i] = player_y_spawn[i];
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28C2
	inx
	clc
L28C2:	adc     #<(_player_y)
	tay
	txa
	adc     #>(_player_y)
	tax
	tya
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28C3
	inx
	clc
L28C3:	adc     #<(_player_y_spawn)
	sta     ptr1
	txa
	adc     #>(_player_y_spawn)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     staxspidx
;
; for (i = 0; i < player_all; ++i) {
;
	ldx     #$00
	inc     _i
	jmp     L290A
;
; memcpy(update_list,updateListData,sizeof(updateListData));
;
L2420:	ldy     #$00
L2434:	lda     _updateListData,y
	sta     _update_list,y
	dey
	bpl     L2434
;
; set_vram_update(update_list);
;
	lda     #<(_update_list)
	ldx     #>(_update_list)
	jsr     _set_vram_update
;
; ppu_on_all();
;
	jsr     _ppu_on_all
;
; game_done = FALSE;
;
	lda     #$00
	sta     _game_done
;
; game_paused = FALSE;
;
	sta     _game_paused
;
; bright = 0;
;
	sta     _bright
;
; frame_cnt = 0;
;
	sta     _frame_cnt
;
; while (!game_done) {
;
	jmp     L26A9
;
; spr=(player_all-1)<<4;
;
L2440:	lda     _player_all
	sec
	sbc     #$01
	asl     a
	asl     a
	asl     a
	asl     a
	sta     _spr
;
; for (i=0;i<player_all;++i) {
;
	lda     #$00
	sta     _i
	tax
L290B:	lda     _i
	cmp     _player_all
	jcs     L2449
;
; py=player_y[i]>>FP_BITS;
;
	asl     a
	bcc     L28C4
	inx
	clc
L28C4:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     shrax4
	sta     _py
;
; if (player_wait[i]) {
;
	ldy     _i
	ldx     #$00
	lda     _player_wait,y
	beq     L290D
;
; if (player_wait[i]>=16||player_wait[i]&2) py=240;
;
	ldy     _i
	lda     _player_wait,y
	cmp     #$10
	bcs     L290C
	ldy     _i
	lda     _player_wait,y
	and     #$02
	beq     L290D
L290C:	lda     #$F0
	sta     _py
;
; px = player_x[i]>>FP_BITS;
;
L290D:	lda     _i
	asl     a
	bcc     L28C5
	inx
	clc
L28C5:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     shrax4
	sta     _px
;
; anim_frame = (player_anim_cnt[i] / FRAMES_PER_STEP) % WALK_CYCLE;
;
	ldy     _i
	lda     _player_anim_cnt,y
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	and     #$01
	sta     _anim_frame
;
; switch (player_dir[i]) {
;
	ldy     _i
	lda     _player_dir,y
;
; }
;
	beq     L290E
	cmp     #$10
	beq     L290E
	cmp     #$20
	beq     L290F
	cmp     #$40
	beq     L2910
	cmp     #$80
	beq     L2911
	jmp     L246C
;
; case DIR_UP: spr_dir = SPR_UP; break;
;
L290E:	lda     #$02
	jmp     L28AF
;
; case DIR_DOWN: spr_dir = SPR_DOWN; break;
;
L290F:	lda     #$00
	jmp     L28AF
;
; case DIR_LEFT: spr_dir = SPR_LEFT; break;
;
L2910:	lda     #$03
	jmp     L28AF
;
; case DIR_RIGHT: spr_dir = SPR_RIGHT; break;
;
L2911:	lda     #$01
L28AF:	sta     _spr_dir
;
; if(player_mode[i]==MODE_SQUID) oam_meta_spr(px, py, spr, SprPlayers[i][0][spr_dir][anim_frame]);
;
L246C:	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	bne     L247F
	jsr     decsp3
	lda     _px
	ldy     #$02
	sta     (sp),y
	lda     _py
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28C6
	inx
	clc
L28C6:	adc     #<(_SprPlayers)
	sta     ptr1
	txa
	adc     #>(_SprPlayers)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
;
; else oam_meta_spr(px, py, spr, SprPlayers[i][player_wpn[i]][spr_dir][anim_frame]);
;
	jmp     L29B8
L247F:	jsr     decsp3
	lda     _px
	ldy     #$02
	sta     (sp),y
	lda     _py
	dey
	sta     (sp),y
	lda     _spr
	dey
	sta     (sp),y
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28C9
	inx
	clc
L28C9:	adc     #<(_SprPlayers)
	sta     ptr1
	txa
	adc     #>(_SprPlayers)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _player_wpn,y
	asl     a
	bcc     L28CA
	inx
	clc
L28CA:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
L29B8:	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _spr_dir
	asl     a
	bcc     L28CB
	inx
	clc
L28CB:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	sta     ptr1
	stx     ptr1+1
	ldx     #$00
	lda     _anim_frame
	asl     a
	bcc     L28CC
	inx
	clc
L28CC:	adc     ptr1
	sta     ptr1
	txa
	adc     ptr1+1
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _oam_meta_spr
;
; spr-=16;
;
	lda     _spr
	sec
	sbc     #$10
	sta     _spr
;
; for (i=0;i<player_all;++i) {
;
	ldx     #$00
	inc     _i
	jmp     L290B
;
; ppu_wait_frame();
;
L2449:	jsr     _ppu_wait_frame
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; ++frame_cnt;
;
	inc     _frame_cnt
;
; if (!game_paused && (frame_cnt % TIMER_CYCLE == 0)) {
;
	lda     _game_paused
	bne     L249D
	lda     _frame_cnt
	and     #$1F
	bne     L249D
;
; timer--;
;
	dec     _timer
;
; insert_into_update_list(0x20,0x4f,timer/10 + 0xb0);
;
L249D:	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	lda     #$4F
	dey
	sta     (sp),y
	lda     _timer
	jsr     pusha0
	lda     #$0A
	jsr     tosudiva0
	clc
	adc     #$B0
	jsr     _insert_into_update_list
;
; insert_into_update_list(0x20,0x50,timer%10 + 0xb0);
;
	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _timer
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$B0
	jsr     _insert_into_update_list
;
; i = pad_trigger(0);
;
	lda     #$00
	jsr     _pad_trigger
	sta     _i
;
; i |= pad_trigger(1);
;
	lda     _i
	jsr     pusha0
	lda     #$01
	jsr     _pad_trigger
	jsr     tosorax
	sta     _i
;
; if (i & PAD_START) {
;
	and     #$08
	beq     L24B4
;
; game_paused ^= TRUE;
;
	ldx     #$00
	lda     _game_paused
	eor     #$01
	sta     _game_paused
;
; if (game_paused) {
;
	lda     _game_paused
	beq     L2914
;
; pal_bg(palPaused);
;
	lda     #<(_palPaused)
	ldx     #>(_palPaused)
	jsr     _pal_bg
;
; pal_spr(palCharPaused);
;
	lda     #<(_palCharPaused)
	ldx     #>(_palCharPaused)
;
; } else {
;
	jmp     L28B1
;
; pal_bg(levelList[game_level*LEVEL_ENTRY+1]);
;
L2914:	lda     _game_level
	jsr     shlax2
	clc
	adc     #$01
	bcc     L24C2
	inx
L24C2:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     _pal_bg
;
; pal_spr(levelList[game_level*LEVEL_ENTRY+2]);
;
	ldx     #$00
	lda     _game_level
	jsr     shlax2
	clc
	adc     #$02
	bcc     L24C6
	inx
L24C6:	stx     tmp1
	asl     a
	rol     tmp1
	clc
	adc     #<(_levelList)
	sta     ptr1
	lda     tmp1
	adc     #>(_levelList)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
L28B1:	jsr     _pal_spr
;
; music_pause(game_paused);
;
	lda     _game_paused
	jsr     _music_pause
;
; sfx_play(SFX_SPLAT,0);
;
	lda     #$01
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; if (game_paused) continue;
;
L24B4:	lda     _game_paused
	jne     L26A9
;
; if (wait) {
;
	lda     _wait
	beq     L2915
;
; --wait;
;
	dec     _wait
;
; if (!wait) {
;
	bne     L2915
;
; music_play_gated(MUSIC_GAME,8);
;
	lda     #$01
	jsr     pusha
	lda     #$08
	jsr     _music_play_gated
;
; if (timer == 0) {
;
L2915:	lda     _timer
	bne     L2916
;
; music_play(MUSIC_CLEAR);
;
	lda     #$02
	jsr     _music_play
;
; game_done = TRUE;
;
	lda     #$01
	sta     _game_done
;
; for (i = 0; i < player_all; ++i) {
;
L2916:	lda     #$00
	sta     _i
	tax
L2917:	lda     _i
	cmp     _player_all
	txa
	sbc     #$00
	jcs     L2937
;
; if (player_wait[i]) {
;
	ldy     _i
	lda     _player_wait,y
	beq     L24E4
;
; if (player_wait[i] == 16) {
;
	ldy     _i
	lda     _player_wait,y
	cmp     #$10
	bne     L24E8
;
; sfx_play(SFX_RESPAWN1,0);
;
	lda     #$02
	jsr     pusha
	lda     #$00
	jsr     _sfx_play
;
; --player_wait[i];
;
L24E8:	lda     #<(_player_wait)
	ldx     #>(_player_wait)
	clc
	adc     _i
	bcc     L24F1
	inx
L24F1:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	ldx     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; }else{
;
	jmp     L2930
;
; if (wait) continue; /* Avoid processing input during initial spawn. */
;
L24E4:	lda     _wait
	jne     L2936
;
; if (player_cnt[i])  {
;
	lda     _i
	asl     a
	bcc     L28CD
	ldx     #$01
	clc
L28CD:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L255E
;
; px = player_x[i] >> (TILE_SIZE_BIT + FP_BITS);
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28CE
	inx
	clc
L28CE:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _px
;
; py = player_y[i] >> (TILE_SIZE_BIT + FP_BITS);
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28CF
	inx
	clc
L28CF:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _py
;
; map_type = map[MAP_ADR(px, py)];
;
	ldx     #$00
	lda     _py
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
;
; if((map_type == 0x2c || map_type == 0x2d || map_type == 0x3c || map_type == 0x3d) && (player_mode[i]==MODE_SQUID)) player_speed[i]=1<<FP_BITS; //water is slow for squid!
;
	cmp     #$2C
	beq     L2918
	lda     (sp),y
	cmp     #$2D
	beq     L2918
	cmp     #$3C
	beq     L2918
	cmp     #$3D
	beq     L2918
	ldx     #$00
	jmp     L291E
L2918:	ldy     _i
	ldx     #$00
	lda     _player_mode,y
	cmp     #$01
	bne     L291E
	lda     _i
	asl     a
	bcc     L28D0
	inx
	clc
L28D0:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	lda     #$10
	ldy     #$00
	sta     (ptr1),y
	iny
	lda     #$00
	sta     (ptr1),y
;
; else player_speed[i]=weapon_movement_speed[player_wpn[i]];                                                                                     //otherwise have normal speed, squid or kid.
;
	jmp     L2514
L291E:	lda     _i
	asl     a
	bcc     L28D1
	inx
	clc
L28D1:	adc     #<(_player_speed)
	sta     sreg
	txa
	adc     #>(_player_speed)
	sta     sreg+1
	ldy     _i
	lda     _player_wpn,y
	sta     ptr1
	lda     #$00
	clc
	adc     #>(_weapon_movement_speed)
	sta     ptr1+1
	ldy     #<(_weapon_movement_speed)
	lda     (ptr1),y
	ldy     #$00
	sta     (sreg),y
	iny
	lda     #$00
	sta     (sreg),y
;
; switch (player_dir[i]) {
;
L2514:	ldy     _i
	tax
	lda     _player_dir,y
;
; }
;
	cmp     #$10
	jeq     L2921
	cmp     #$20
	beq     L2920
	cmp     #$40
	beq     L291F
	cmp     #$80
	jne     L2922
;
; case DIR_RIGHT: player_x[i]+=player_speed[i]; break;
;
	lda     _i
	asl     a
	bcc     L28D2
	inx
	clc
L28D2:	adc     #<(_player_x)
	tay
	txa
	adc     #>(_player_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28D3
	inx
	clc
L28D3:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	jmp     L2958
;
; case DIR_LEFT:  player_x[i]-=player_speed[i]; break;
;
L291F:	lda     _i
	asl     a
	bcc     L28D4
	inx
	clc
L28D4:	adc     #<(_player_x)
	tay
	txa
	adc     #>(_player_x)
	jmp     L29AA
;
; case DIR_DOWN:  player_y[i]+=player_speed[i]; break;
;
L2920:	lda     _i
	asl     a
	bcc     L28D6
	inx
	clc
L28D6:	adc     #<(_player_y)
	tay
	txa
	adc     #>(_player_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28D7
	inx
	clc
L28D7:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	jmp     L2958
;
; case DIR_UP:    player_y[i]-=player_speed[i]; break;
;
L2921:	lda     _i
	asl     a
	bcc     L28D8
	inx
	clc
L28D8:	adc     #<(_player_y)
	tay
	txa
	adc     #>(_player_y)
L29AA:	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28D9
	inx
	clc
L28D9:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
L2958:	ldy     #$00
	jsr     staxspidx
;
; player_cnt[i]-=player_speed[i];
;
	ldx     #$00
L2922:	lda     _i
	asl     a
	bcc     L28DA
	inx
	clc
L28DA:	adc     #<(_player_cnt)
	tay
	txa
	adc     #>(_player_cnt)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28DB
	inx
	clc
L28DB:	adc     #<(_player_speed)
	sta     ptr1
	txa
	adc     #>(_player_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; if (player_cnt[i] <= 0) {
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28DC
	inx
	clc
L28DC:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$00
	bvc     L253F
	eor     #$80
L253F:	jpl     L253C
;
; if (player_cnt[i] < 0) {
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28DD
	inx
	clc
L28DD:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	ldx     #$00
	jcc     L2923
;
; player_cnt[i] = 0;
;
	lda     _i
	asl     a
	bcc     L28DE
	inx
	clc
L28DE:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; player_x[i]=(player_x[i]&0xff00)+(player_dir[i]==DIR_LEFT?0x100:0);
;
	tax
	lda     _i
	asl     a
	bcc     L28DF
	inx
	clc
L28DF:	adc     #<(_player_x)
	sta     sreg
	txa
	adc     #>(_player_x)
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28E0
	inx
	clc
L28E0:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _player_dir,y
	cmp     #$40
	bne     L28B3
	inx
L28B3:	lda     #$00
	clc
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; player_y[i]=(player_y[i]&0xff00)+(player_dir[i]==DIR_UP  ?0x100:0);
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28E1
	inx
	clc
L28E1:	adc     #<(_player_y)
	sta     sreg
	txa
	adc     #>(_player_y)
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28E2
	inx
	clc
L28E2:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _player_dir,y
	cmp     #$10
	bne     L28B4
	inx
L28B4:	lda     #$00
	clc
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; } else {
;
	jmp     L255E
;
; player_anim_cnt[i] += 1;
;
L253C:	lda     #<(_player_anim_cnt)
	ldx     #>(_player_anim_cnt)
	clc
	adc     _i
	bcc     L2561
	inx
L2561:	sta     ptr1
	stx     ptr1+1
	lda     (ptr1),y
	clc
	adc     #$01
	sta     (ptr1),y
;
; if (!player_cnt[i]) {
;
L255E:	ldx     #$00
L2923:	lda     _i
	asl     a
	bcc     L28E3
	inx
	clc
L28E3:	adc     #<(_player_cnt)
	sta     ptr1
	txa
	adc     #>(_player_cnt)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     bnegax
	jeq     L25BA
;
; if(player_ai[i]!=0){
;
	ldy     _i
	lda     _player_ai,y
	beq     L2566
;
; j=ai_move(i);
;
	lda     _i
	jsr     _ai_move
;
; }else{
;
	jmp     L28B5
;
; j = pad_state(i);
;
L2566:	lda     _i
	jsr     _pad_state
L28B5:	sta     _j
;
; if (player_cooldown[i]) {
;
	ldy     _i
	lda     _player_cooldown,y
	beq     L2924
;
; player_cooldown[i] -= 1;
;
	lda     #<(_player_cooldown)
	ldx     #>(_player_cooldown)
	clc
	adc     _i
	bcc     L2577
	inx
L2577:	sta     ptr1
	stx     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	sec
	sbc     #$01
	sta     (ptr1),y
;
; if (j&PAD_B) player_mode[i]=MODE_SQUID; else player_mode[i]=MODE_NORMAL;
;
L2924:	lda     _j
	and     #$02
	beq     L2579
	ldy     _i
	lda     #$01
	jmp     L28B6
L2579:	ldy     _i
L28B6:	sta     _player_mode,y
;
; if (j & player_dir[i] && player_diag_flip[i]) {
;
	ldy     _i
	lda     _player_dir,y
	and     _j
	pha
	pla
	beq     L2928
	ldy     _i
	lda     _player_diag_flip,y
	beq     L2928
;
; j &= ~player_dir[i];
;
	ldy     _i
	lda     _player_dir,y
	eor     #$FF
	and     _j
	sta     _j
;
; player_diag_flip[i] = 0;
;
	ldy     _i
	lda     #$00
	sta     _player_diag_flip,y
;
; if (j&PAD_LEFT)  player_move(i,0);
;
L2928:	lda     _j
	and     #$40
	beq     L2929
	lda     _i
	jsr     pusha
	lda     #$00
	jsr     _player_move
;
; if (j&PAD_RIGHT) player_move(i,2);
;
L2929:	lda     _j
	and     #$80
	beq     L292A
	lda     _i
	jsr     pusha
	lda     #$02
	jsr     _player_move
;
; if (j&PAD_UP)    player_move(i,1);
;
L292A:	lda     _j
	and     #$10
	beq     L292B
	lda     _i
	jsr     pusha
	lda     #$01
	jsr     _player_move
;
; if (j&PAD_DOWN)  player_move(i,3);
;
L292B:	lda     _j
	and     #$20
	beq     L25A3
	lda     _i
	jsr     pusha
	lda     #$03
	jsr     _player_move
;
; if (player_dir[i]==DIR_NONE) player_mode[i]=MODE_SQUID;
;
L25A3:	ldy     _i
	lda     _player_dir,y
	bne     L292C
	ldy     _i
	lda     #$01
	sta     _player_mode,y
;
; if ((j&PAD_A)&&(player_mode[i]==MODE_NORMAL)) player_make_projectile(i); else player_charge[i] = 0;
;
L292C:	lda     _j
	and     #$01
	beq     L25B0
	ldy     _i
	lda     _player_mode,y
	bne     L25B0
	lda     _i
	jsr     _player_make_projectile
	jmp     L25BA
L25B0:	ldy     _i
	lda     #$00
	sta     _player_charge,y
;
; if (projectile_cnt[i]) {
;
L25BA:	ldx     #$00
L2930:	lda     _i
	asl     a
	bcc     L28E4
	inx
	clc
L28E4:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L25C6
;
; if (projectile_cnt[i] <= 0) {
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28E5
	inx
	clc
L28E5:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	cmp     #$01
	txa
	sbc     #$00
	bvc     L25C5
	eor     #$80
L25C5:	asl     a
	ldx     #$00
	jcc     L2931
;
; if (projectile_cnt[i] < 0) {
;
	lda     _i
	asl     a
	bcc     L28E6
	inx
	clc
L28E6:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	iny
	lda     (ptr1),y
	tax
	cpx     #$80
	ldx     #$00
	jcc     L2931
;
; projectile_cnt[i] = 0;
;
	lda     _i
	asl     a
	bcc     L28E7
	inx
	clc
L28E7:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	lda     #$00
	dey
	sta     (ptr1),y
	iny
	sta     (ptr1),y
;
; projectile_x[i]=(projectile_x[i]&0xff00)+(projectile_dir[i]==DIR_LEFT?0x100:0);
;
	tax
	lda     _i
	asl     a
	bcc     L28E8
	inx
	clc
L28E8:	adc     #<(_projectile_x)
	sta     sreg
	txa
	adc     #>(_projectile_x)
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28E9
	inx
	clc
L28E9:	adc     #<(_projectile_x)
	sta     ptr1
	txa
	adc     #>(_projectile_x)
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _projectile_dir,y
	cmp     #$40
	bne     L28B7
	inx
L28B7:	lda     #$00
	clc
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; projectile_y[i]=(projectile_y[i]&0xff00)+(projectile_dir[i]==DIR_UP  ?0x100:0);
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28EA
	inx
	clc
L28EA:	adc     #<(_projectile_y)
	sta     sreg
	txa
	adc     #>(_projectile_y)
	sta     sreg+1
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28EB
	inx
	clc
L28EB:	adc     #<(_projectile_y)
	sta     ptr1
	txa
	adc     #>(_projectile_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     ptr1+1
	ldy     _i
	ldx     #$00
	lda     _projectile_dir,y
	cmp     #$10
	bne     L28B8
	inx
L28B8:	lda     #$00
	clc
	pha
	txa
	adc     ptr1+1
	tax
	pla
	ldy     #$00
	sta     (sreg),y
	iny
	txa
	sta     (sreg),y
;
; if (!projectile_cnt[i]) {
;
L25C6:	ldx     #$00
L2931:	lda     _i
	asl     a
	bcc     L28EC
	inx
	clc
L28EC:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     bnegax
	beq     L25E4
;
; projectile_move(i);
;
	lda     _i
	jsr     _projectile_move
;
; if (projectile_cnt[i]) {
;
L25E4:	ldx     #$00
	lda     _i
	asl     a
	bcc     L28ED
	inx
	clc
L28ED:	adc     #<(_projectile_cnt)
	sta     ptr1
	txa
	adc     #>(_projectile_cnt)
	sta     ptr1+1
	ldy     #$00
	lda     (ptr1),y
	iny
	ora     (ptr1),y
	jeq     L24DE
;
; switch (projectile_dir[i]) {
;
	ldy     _i
	ldx     #$00
	lda     _projectile_dir,y
;
; }
;
	cmp     #$10
	jeq     L2934
	cmp     #$20
	beq     L2933
	cmp     #$40
	beq     L2932
	cmp     #$80
	jne     L2935
;
; case DIR_RIGHT: projectile_x[i]+=projectile_speed[player_wpn[i]]; break;
;
	lda     _i
	asl     a
	bcc     L28EE
	inx
	clc
L28EE:	adc     #<(_projectile_x)
	tay
	txa
	adc     #>(_projectile_x)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     _i
	ldx     #$00
	lda     _player_wpn,y
	asl     a
	bcc     L28EF
	inx
	clc
L28EF:	adc     #<(_projectile_speed)
	sta     ptr1
	txa
	adc     #>(_projectile_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	jmp     L2959
;
; case DIR_LEFT:  projectile_x[i]-=projectile_speed[player_wpn[i]]; break;
;
L2932:	lda     _i
	asl     a
	bcc     L28F0
	inx
	clc
L28F0:	adc     #<(_projectile_x)
	tay
	txa
	adc     #>(_projectile_x)
	jmp     L29AD
;
; case DIR_DOWN:  projectile_y[i]+=projectile_speed[player_wpn[i]]; break;
;
L2933:	lda     _i
	asl     a
	bcc     L28F2
	inx
	clc
L28F2:	adc     #<(_projectile_y)
	tay
	txa
	adc     #>(_projectile_y)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     _i
	ldx     #$00
	lda     _player_wpn,y
	asl     a
	bcc     L28F3
	inx
	clc
L28F3:	adc     #<(_projectile_speed)
	sta     ptr1
	txa
	adc     #>(_projectile_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tosaddax
	jmp     L2959
;
; case DIR_UP:    projectile_y[i]-=projectile_speed[player_wpn[i]]; break;
;
L2934:	lda     _i
	asl     a
	bcc     L28F4
	inx
	clc
L28F4:	adc     #<(_projectile_y)
	tay
	txa
	adc     #>(_projectile_y)
L29AD:	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     _i
	ldx     #$00
	lda     _player_wpn,y
	asl     a
	bcc     L28F5
	inx
	clc
L28F5:	adc     #<(_projectile_speed)
	sta     ptr1
	txa
	adc     #>(_projectile_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
L2959:	ldy     #$00
	jsr     staxspidx
;
; projectile_cnt[i]-=projectile_speed[player_wpn[i]];
;
	ldx     #$00
L2935:	lda     _i
	asl     a
	bcc     L28F6
	inx
	clc
L28F6:	adc     #<(_projectile_cnt)
	tay
	txa
	adc     #>(_projectile_cnt)
	tax
	tya
	jsr     pushax
	sta     ptr1
	stx     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     pushax
	ldy     _i
	ldx     #$00
	lda     _player_wpn,y
	asl     a
	bcc     L28F7
	inx
	clc
L28F7:	adc     #<(_projectile_speed)
	sta     ptr1
	txa
	adc     #>(_projectile_speed)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	dey
	lda     (ptr1),y
	jsr     tossubax
	ldy     #$00
	jsr     staxspidx
;
; for (i = 0; i < player_all; ++i) {
;
L24DE:	ldx     #$00
L2936:	inc     _i
	jmp     L2917
;
; for (i = 0; i < player_all; ++i) {
;
L2937:	lda     #$00
	sta     _i
L2938:	lda     _i
	cmp     _player_all
	txa
	sbc     #$00
	jcs     L294E
;
; for (j = i + 1; j < player_all; ++j) {
;
	lda     _i
	clc
	adc     #$01
	sta     _j
	ldx     #$00
L2939:	lda     _j
	cmp     _player_all
	jcs     L294D
;
; if (((player_x[i]&0xff00) == (player_x[j]&0xff00)) && ((player_y[i]&0xff00) == (player_y[j]&0xff00))) {
;
	lda     _i
	asl     a
	bcc     L28F8
	inx
	clc
L28F8:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     pushax
	tax
	lda     _j
	asl     a
	bcc     L28F9
	inx
	clc
L28F9:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     tosicmp
	jne     L2628
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28FA
	inx
	clc
L28FA:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     pushax
	tax
	lda     _j
	asl     a
	bcc     L28FB
	inx
	clc
L28FB:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     tosicmp
	jne     L2628
;
; if ((player_wpn[i] == WPN_ROLLER)&&(player_mode[i]!=MODE_SQUID)&&(player_mode[j]!=MODE_SQUID)){
;
	ldy     _i
	lda     _player_wpn,y
	cmp     #$01
	bne     L2636
	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	beq     L2636
	ldy     _j
	lda     _player_mode,y
	cmp     #$01
	beq     L2636
;
; player_die(j);
;
	lda     _j
	jsr     _player_die
;
; player_die(i);
;
	lda     _i
	jsr     _player_die
;
; if ((player_wpn[j] == WPN_ROLLER)&&(player_mode[j]!=MODE_SQUID)&&(player_mode[i]!=MODE_SQUID)){
;
L2636:	ldy     _j
	lda     _player_wpn,y
	cmp     #$01
	bne     L2647
	ldy     _j
	lda     _player_mode,y
	cmp     #$01
	beq     L2647
	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	beq     L2647
;
; player_die(i);
;
	lda     _i
	jsr     _player_die
;
; player_die(j);
;
	lda     _j
	jsr     _player_die
;
; if ((player_wpn[i] == WPN_ROLLER)&&(player_mode[i]!=MODE_SQUID)&&(player_mode[j]==MODE_SQUID)) player_die(j);
;
L2647:	ldy     _i
	lda     _player_wpn,y
	cmp     #$01
	bne     L2658
	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	beq     L2658
	ldy     _j
	lda     _player_mode,y
	cmp     #$01
	bne     L2658
	lda     _j
	jsr     _player_die
;
; if ((player_wpn[j] == WPN_ROLLER)&&(player_mode[j]!=MODE_SQUID)&&(player_mode[i]==MODE_SQUID)) player_die(i);
;
L2658:	ldy     _j
	lda     _player_wpn,y
	cmp     #$01
	bne     L2628
	ldy     _j
	lda     _player_mode,y
	cmp     #$01
	beq     L2628
	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	bne     L2628
	lda     _i
	jsr     _player_die
;
; if (projectile_dir[j] != DIR_NONE &&
;
L2628:	ldy     _j
	lda     _projectile_dir,y
	jeq     L2676
;
; (player_x[i]&0xff00) == (projectile_x[j]&0xff00) &&
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28FC
	inx
	clc
L28FC:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     pushax
	tax
	lda     _j
	asl     a
	bcc     L28FD
	inx
	clc
L28FD:	adc     #<(_projectile_x)
	sta     ptr1
	txa
	adc     #>(_projectile_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     tosicmp
	bne     L2676
;
; (player_y[i]&0xff00) == (projectile_y[j]&0xff00)) {
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L28FE
	inx
	clc
L28FE:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     pushax
	tax
	lda     _j
	asl     a
	bcc     L28FF
	inx
	clc
L28FF:	adc     #<(_projectile_y)
	sta     ptr1
	txa
	adc     #>(_projectile_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     tosicmp
	bne     L2676
;
; if((player_mode[i]==MODE_NORMAL) || (player_mode[i]==MODE_SQUID)) player_die(i);
;
	ldy     _i
	lda     _player_mode,y
	beq     L2947
	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	bne     L2676
L2947:	lda     _i
	jsr     _player_die
;
; if (projectile_dir[i] != DIR_NONE &&
;
L2676:	ldy     _i
	ldx     #$00
	lda     _projectile_dir,y
	jeq     L294C
;
; (player_x[j]&0xff00) == (projectile_x[i]&0xff00) &&
;
	lda     _j
	asl     a
	bcc     L2900
	inx
	clc
L2900:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     pushax
	tax
	lda     _i
	asl     a
	bcc     L2901
	inx
	clc
L2901:	adc     #<(_projectile_x)
	sta     ptr1
	txa
	adc     #>(_projectile_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     tosicmp
	bne     L295A
;
; (player_y[j]&0xff00) == (projectile_y[i]&0xff00)) {
;
	ldx     #$00
	lda     _j
	asl     a
	bcc     L2902
	inx
	clc
L2902:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     pushax
	tax
	lda     _i
	asl     a
	bcc     L2903
	inx
	clc
L2903:	adc     #<(_projectile_y)
	sta     ptr1
	txa
	adc     #>(_projectile_y)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	tax
	lda     #$00
	jsr     tosicmp
	bne     L295A
;
; if((player_mode[j]==MODE_NORMAL) || (player_mode[j]==MODE_SQUID)) player_die(j);
;
	ldy     _j
	lda     _player_mode,y
	beq     L294B
	ldy     _j
	lda     _player_mode,y
	cmp     #$01
	bne     L295A
L294B:	lda     _j
	jsr     _player_die
;
; for (j = i + 1; j < player_all; ++j) {
;
L295A:	ldx     #$00
L294C:	inc     _j
	jmp     L2939
;
; for (i = 0; i < player_all; ++i) {
;
L294D:	inc     _i
	jmp     L2938
;
; for ( i = 0; i < player_all; ++i) {
;
L294E:	lda     #$00
	sta     _i
	tax
L294F:	lda     _i
	cmp     _player_all
	bcs     L26A9
;
; px = player_x[i] >> (TILE_SIZE_BIT + FP_BITS);
;
	asl     a
	bcc     L2904
	inx
	clc
L2904:	adc     #<(_player_x)
	sta     ptr1
	txa
	adc     #>(_player_x)
	sta     ptr1+1
	ldy     #$01
	lda     (ptr1),y
	sta     _px
;
; py = player_y[i] >> (TILE_SIZE_BIT + FP_BITS);
;
	ldx     #$00
	lda     _i
	asl     a
	bcc     L2905
	inx
	clc
L2905:	adc     #<(_player_y)
	sta     ptr1
	txa
	adc     #>(_player_y)
	sta     ptr1+1
	lda     (ptr1),y
	sta     _py
;
; map_type = map[MAP_ADR(px, py)];
;
	ldx     #$00
	lda     _py
	jsr     aslax4
	sta     ptr1
	stx     ptr1+1
	lda     _px
	ora     ptr1
	sta     ptr1
	lda     ptr1+1
	clc
	adc     #>(_map)
	sta     ptr1+1
	ldy     #<(_map)
	lda     (ptr1),y
	ldy     #$00
	sta     (sp),y
;
; if ((map_type == 0x2c || map_type == 0x2d || map_type == 0x3c || map_type == 0x3d) && player_mode[i] != MODE_SQUID) {
;
	cmp     #$2C
	beq     L2950
	lda     (sp),y
	cmp     #$2D
	beq     L2950
	cmp     #$3C
	beq     L2950
	cmp     #$3D
	bne     L295B
L2950:	ldy     _i
	lda     _player_mode,y
	cmp     #$01
	beq     L295B
;
; player_die(i);
;
	lda     _i
	jsr     _player_die
;
; for ( i = 0; i < player_all; ++i) {
;
L295B:	ldx     #$00
	inc     _i
	jmp     L294F
;
; while (!game_done) {
;
L26A9:	lda     _game_done
	jeq     L2440
;
; for (i = 0; i < player_all; ++i) {
;
	lda     #$00
	sta     _i
	tax
L2955:	lda     _i
	cmp     _player_all
	bcs     L26CB
;
; player_score[i] = score_player(i);
;
	asl     a
	bcc     L2906
	inx
	clc
L2906:	adc     #<(_player_score)
	tay
	txa
	adc     #>(_player_score)
	tax
	tya
	jsr     pushax
	lda     _i
	jsr     _score_player
	ldy     #$00
	jsr     staxspidx
;
; for (i = 0; i < player_all; ++i) {
;
	ldx     #$00
	inc     _i
	jmp     L2955
;
; insert_into_update_list(0x20,0x50,timer%10 + 0xb0);
;
L26CB:	jsr     decsp2
	lda     #$20
	ldy     #$01
	sta     (sp),y
	lda     #$50
	dey
	sta     (sp),y
	lda     _timer
	jsr     pusha0
	lda     #$0A
	jsr     tosumoda0
	clc
	adc     #$B0
	jsr     _insert_into_update_list
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; sfx_play(SFX_START,0);
;
	lda     #$00
	jsr     pusha
	jsr     _sfx_play
;
; for (i = 0; i < 32; i += 8) {
;
	lda     #$00
L28BA:	sta     _i
	cmp     #$20
	jcs     L26E0
;
; for (j = 10; j < 13; ++j) {
;
	lda     #$0A
	sta     _j
L2956:	lda     _j
	cmp     #$0D
	jcs     L26E9
;
; clear_update_list();
;
	jsr     _clear_update_list
;
; set_tile_at(NAMETABLE_A,i+0,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+1,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+2,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$02
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+3,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$03
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+4,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$04
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+5,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$05
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+6,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$06
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,i+7,j,' '+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     _i
	clc
	adc     #$07
	ldy     #$01
	sta     (sp),y
	lda     _j
	dey
	sta     (sp),y
	lda     #$A0
	jsr     _set_tile_at
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; for (j = 10; j < 13; ++j) {
;
	inc     _j
	jmp     L2956
;
; clear_update_list();
;
L26E9:	jsr     _clear_update_list
;
; set_tile_palette(i/2+0,5,0);
;
	jsr     decsp2
	lda     _i
	lsr     a
	ldy     #$01
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	tya
	jsr     _set_tile_palette
;
; set_tile_palette(i/2+1,5,0);
;
	jsr     decsp2
	lda     _i
	lsr     a
	clc
	adc     #$01
	ldy     #$01
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	tya
	jsr     _set_tile_palette
;
; set_tile_palette(i/2+2,5,0);
;
	jsr     decsp2
	lda     _i
	lsr     a
	clc
	adc     #$02
	ldy     #$01
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	tya
	jsr     _set_tile_palette
;
; set_tile_palette(i/2+3,5,0);
;
	jsr     decsp2
	lda     _i
	lsr     a
	clc
	adc     #$03
	ldy     #$01
	sta     (sp),y
	lda     #$05
	dey
	sta     (sp),y
	tya
	jsr     _set_tile_palette
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; for (i = 0; i < 32; i += 8) {
;
	lda     #$08
	clc
	adc     _i
	jmp     L28BA
;
; clear_update_list();
;
L26E0:	jsr     _clear_update_list
;
; set_tile_at(NAMETABLE_A,13,11,'G'+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$0D
	ldy     #$01
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	lda     #$C7
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,14,11,'A'+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$0E
	ldy     #$01
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	lda     #$C1
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,15,11,'M'+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$0F
	ldy     #$01
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	lda     #$CD
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,16,11,'E'+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$10
	ldy     #$01
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	lda     #$C5
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,17,11,'!'+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$11
	ldy     #$01
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	lda     #$A1
	jsr     _set_tile_at
;
; set_tile_at(NAMETABLE_A,18,11,'!'+0x80);
;
	jsr     decsp4
	lda     #$00
	ldy     #$02
	sta     (sp),y
	iny
	lda     #$20
	sta     (sp),y
	lda     #$12
	ldy     #$01
	sta     (sp),y
	lda     #$0B
	dey
	sta     (sp),y
	lda     #$A1
	jsr     _set_tile_at
;
; ppu_wait_frame();
;
	jsr     _ppu_wait_frame
;
; delay(100);
;
	lda     #$64
	jsr     _delay
;
; reset_palette_state();
;
	jsr     _reset_palette_state
;
; }
;
	jmp     incsp1

.endproc

; ---------------------------------------------------------------
; void __near__ main (void)
; ---------------------------------------------------------------

.segment	"CODE"

.proc	_main: near

.segment	"CODE"

;
; show_title();
;
L275A:	jsr     _show_title
;
; show_select_map();
;
	jsr     _show_select_map
;
; show_select_weapon();
;
	jsr     _show_select_weapon
;
; game_loop();
;
	jsr     _game_loop
;
; show_endgame();
;
	jsr     _show_endgame
;
; show_credits();
;
	jsr     _show_credits
;
; while (1) {
;
	jmp     L275A

.endproc

